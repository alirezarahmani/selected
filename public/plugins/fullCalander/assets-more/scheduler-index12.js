
document.addEventListener('DOMContentLoaded', function() {
    var conceptSchedule = $('#schedule_id').find(":selected").val();
    $('#selected_schedule').val(conceptSchedule);

    let totAssign=[];
    let combined=[];
    let openshift=0;
    $('.btnEmplo').css('background-color','gainsboro');
    $('.btnPos').css('background-color','none');
    console.log(conceptSchedule);
    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {
    timeZone: 'UTC',
    plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline'],
    resourceAreaWidth: 230,
    editable: true,
    selectable:true,
    //eventColor: '#e63d90',
    displayEventTime:true,
    displayEventEnd:true,
    eventBorderColor:'white',
    eventTextColor:'black',
    resourceRender: async function(renderInfo) {
          console.log('hi render resource');
          console.dir(renderInfo);


          let img=renderInfo.resource.extendedProps.img;

          renderInfo.el.style.backgroundColor = 'lightyellow';
          if(renderInfo.resource.id !== "0")
          {
              $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');
              if(!img ){

                  $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
              }else {

                  $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

              }


          }else{
              $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

              $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
          }
          let calBud=0;

          let currentStart=renderInfo.view.currentStart;
          let yy=(currentStart.getFullYear()).toString();
          let mmm;
          if((currentStart.getMonth())<10) {
              let m = (currentStart.getMonth()+1).toString();
              mmm = "0"+m;
          }
          let dd ;
          if(currentStart.getDate()<10){
              let calstart=(currentStart.getDate()).toString();
              dd="0"+calstart;

          }else{
              dd=(currentStart.getDate()).toString();

          }

          let dateStart= yy + "-" + mmm + "-" + dd;


          let currentEnd=renderInfo.view.currentEnd;
          let yy1=(currentEnd.getFullYear()).toString();
          let mmm1;
          if((currentEnd.getMonth())<10) {
              let m1 = (currentEnd.getMonth()+1).toString();
              mmm1 = "0"+m1;
          }
          let dd1 ;

          if(currentEnd.getDate()<10){
              let calend=(currentEnd.getDate()).toString();
              dd1="0"+calend;

          }else{
              dd1=(currentEnd.getDate()).toString();

          }
          let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
          // console.log('calendar date start and end ',dateStart,dateEnd)



          let eventss=await new Promise(resolve => {
              setTimeout(()=>{
              resolve(renderInfo.resource.getEvents());
          },1000)});

         // console.log('getEvents',eventss,eventss.length);


          for(let h=0;h<eventss.length;h++){
              //console.log('arr first',eventss[h].start,eventss[h].end);
              var start1=eventss[h].start;
              let yy11=(start1.getFullYear()).toString();
              let mmm11;
              if((start1.getMonth())<10) {
                  let m11 = (start1.getMonth()+1).toString();
                  mmm11 = "0"+m11;
              }
             // let dd11 =(start1.getDate()).toString();
              let dd11;
             if(start1.getDate() < 10 ){
                 let nnmm=(start1.getDate()).toString();
                 dd11="0"+nnmm;
             }else {
                 dd11=(start1.getDate()).toString();
             }

              let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



              let end1=eventss[h].end;
              let yy22=(end1.getFullYear()).toString();
              let mmm22;
              if((end1.getMonth())<10) {
                  let m112 = (end1.getMonth()+1).toString();
                  mmm22 = "0"+m112;
              }
             // let dd22 =(end1.getDate()).toString();
              let dd22;
              if(end1.getDate() < 10 ){
                  let ssaa=(end1.getDate()).toString();
                  dd22="0"+ssaa;

              }else {
                  dd22=(end1.getDate()).toString();
              }

              let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


              console.log('events date',eveStartt,eveEnddd)

              let numBudget=0;
              if(eveStartt == dateStart &&  eveEnddd < dateEnd)
              {
                  console.log('calculating time');
                  let dif=end1.getTime() - start1.getTime();
                  var diffHrs = Math.floor((dif % 86400000) / 3600000);

                  numBudget = diffHrs;
                  //console.log(Number(numBudget));

              }
              calBud += Number(numBudget);
           //   console.log('in the loop',calBud)


          }
          //console.log('calculatebud',calBud);

          if(renderInfo.resource.id !== "0")
          {
             // console.log('append')
              $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
              totAssign.push(calBud);
          }else{
               openshift=calBud;
          }

          combined.push(calBud);


          //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
          $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");



      },
    eventRender: function(info) {
        console.log('event render',info,info.view.viewSpec.durationUnit);
        if(info.view.viewSpec.durationUnit==='week'|| info.view.viewSpec.durationUnit==='month'){
          if(typeof info.event.extendedProps['avail']!=='undefined'){
              info.event.backgroundColor=info.event.extendedProps['avail']==='1'?'red':'blue';
          }else{
              info.el.append(info.event.extendedProps.description)
          }

        }else{
            console.log(info.event.extendedProps['avail'],'avail');
            if(typeof info.event.extendedProps['avail']!=='undefined'){
                info.event.rendering="background";
                console.log('inside if',info);
                info.event.extendedProps['avail']==1 ?info.event.backgroundColor="red" : info.event.backgroundColor="green"
            }
        }
        var startDatetime =info.event.start;
        var endDatetime=info.event.end;

        var hoursS = startDatetime.getHours();
        console.log('see',info.event.end);
        var minutesS = "0" + startDatetime.getMinutes();
        var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

        var hoursE = endDatetime.getHours();
        var minutesE = "0" + endDatetime.getMinutes();
        var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

        var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

        var nu=Number((info.event.extendedProps.publish));

        if( nu ===0 )
        {

             var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
            info.el.style.backgroundImage='url(' + imageUrl + ')';

        }

        var tooltip = new Tooltip(info.el, {
            title: toolText,
            placement: 'top',
            trigger:'hover ',
            container: 'body'
        });



      },
    eventClick: function(info) {


        console.log('eventClick');
        console.log(info);

        let startDate=info.event.start;

        let titleN =startDate.toString();
        let str = titleN.substring(0, 10);

        $('.titlebar').text('Edit Shift on '+str);
        $('.titlebarDelete').text('Delete Shift on '+str);





        let y=(startDate.getFullYear()).toString();
        let mm;
        if((startDate.getMonth())<10) {
            let m = (startDate.getMonth()+1).toString();
            mm = "0"+m;


        }
        let d =(startDate.getDate()).toString();
        let fullDate= y + "-" + mm + "-" + d;

        var fullTime = startDate.toTimeString();

        var modal2 = document.getElementById('myModal2');
        modal2.style.display = "block";

        var footer3 = document.getElementById('foot3');
        footer3.style.display = "block";




        let employee=info.event._def.resourceIds[0];
        $('#employee_id').val(employee);

        $('.page-head').hide();

        $('#start_date').val(fullDate);
        $('#start_time').val(fullTime);
        //console.log(e);
        let url=$('#myModal2').data('url');
        let id =info.event.id;

        //console.log(id);
        $.ajax({
            url: url+"?"+ $.param({Id_update_scheduler: id}),
            cache:false,
            method: 'GET',
            success: function (response) {
                let res=JSON.parse(response);
                console.log('check me')
                console.log(res);

                if(res.status ===1 ) {
                   // alert((res.row[0]).id);


                    let i=(res.rowShift[0]).id;
                    let f= (res.rowShift[0])["finish_time"];
                    let s= (res.rowShift[0])["start_time"];
                    let u=(res.rowShift[0])["unpaid_break"];
                    let n=(res.rowShift[0])["note"];
                    let po=(res.rowShift[0])["position_id"];
                    let shS=(res.rowShift[0])["status"]




                    $('#pos_id').val(po);
                    $('#_time').val(s);
                    $('#un_break').val(u);
                    $('#time_to').val(f);
                    $('#note_').val(n);
                    $('#shift_status').val(shS);


                    $('#id_edited_shift').val(i);



                    let pub= (res.rowScheduler[0])["publish"];
                    let idsche= (res.rowScheduler[0])["id"];
                    let j= (res.rowScheduler[0])["jobsite_id"];
                    let rshift= (res.rowScheduler[0])["repeat_shift"];
                    let revery= (res.rowScheduler[0])["repeat_every"];
                    let end= (res.rowScheduler[0])["end_date"];
                    let endRep= (res.rowScheduler[0])["end_repeat"];

                    let schSH= (res.rowScheduler[0])["status"];
                    let start= (res.rowScheduler[0])["start_date"];
                    let sched=(res.rowScheduler[0])["schedule_id"];

                    $('#start_date').val(start);
                    $('#id_ed_scheduler2').val(idsche);
                    $('#job_id').val(j);
                    $('#repeat_shift').val(rshift);
                    $('#every').val(revery);
                    $('#ended_date').val(end);
                  //$('#publicValue').val(pub);
                    $('#scheduler_status').val(schSH);
                    $('#schedule__id').val(sched);

                    if(pub == 1){
                        $('#submitAssignShiftEdit').hide();
                      $('#unPublishIT').show();
                    }else if(pub ==0){
                        $('#submitAssignShiftEdit').show();
                        $('#unPublishIT').hide();
                    }


                    if(rshift == 0){

                        $('#sch_repeat').val("0");

                        $('#repeat_shift').prop('checked',false);
                       // $('#unPublishIT').prop("disabled",false);
                       // $('#updatePublish').prop("disabled",false);




                    }else if(rshift==1){
                        $('#sch_repeat').val("1");

                        $('#repeat_shift').prop('checked',true);
                        $('#ended_date').val(endRep);
                        $('#every').val(revery);
                        $('.custshow').css('display', 'block');
                      //  $('#unPublishIT').prop("disabled",true);
                       // $('#updatePublish').prop("disabled",true);
                        // $('#unPublishIT').show();
                         $('#updatePublish').show();

                        }

                    }

            }
        });



        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {

            if (event.target == modal2) {
                modal2.style.display = "none";
            }
        };


        $('#deleteAssignShift').on('click',function (e) {
            e.preventDefault();
            if($('#sch_repeat').val() == 0){


                if (confirm("Are you sure?")) {
                    let url = $(this).data('url');
                    var id_d=info.event.id;

                    // console.log(id);

                    $.ajax({
                        type: "DELETE",
                        url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                        cache: false,

                        success: function (response) {
                            //console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res["id_deleted"]);
                                location.reload();

                            }


                        }

                    });
                }




            }else if($('#sch_repeat').val() == 1){

                $('#modalDelete').show();

                $('#deleteAll').on('click', function (e) {
                    e.preventDefault();

                    let idDel=$('#id_ed_scheduler2').val();
                    let url = $(this).data('url2');

                    $.ajax({
                        type: "DELETE",
                        url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                        cache: false,

                        success: function (response) {
                            //console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res["id_deleted"]);
                                $('#modalPrefer').hide();
                                $('#modalDelete').hide();
                                location.reload();

                            }


                        }

                    })

                });

                $('#deleteOne').on('click', function (e) {
                    e.preventDefault();
                    let idDel=$('#id_ed_scheduler2').val();
                    let url = $(this).data('url2');

                    $.ajax({
                        type: "DELETE",
                        url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                        cache: false,

                        success: function (response) {
                            //console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res["id_deleted"]);
                                $('#myModal2').hide();
                                $('#modalDelete').hide();
                                info.el.remove();

                            }


                        }

                    })

                });

            }

        });

        $('#submitAssignShiftEdit').on('click', function (e) {
            e.preventDefault();
            // console.log(this);

            let url2=$(this).data('url2');
            if($('#sch_repeat').val() == 0){

                $.ajax({
                    type: "POST",
                    url: url2,
                    data :$('#frmsubmitAssignShift').serialize(),
                    cache:false,

                    success: function (response){
                        //console.log(response);
                        let res=JSON.parse(response);
                        if(res.status ===1){
                            alert(res['id_scheduler']);
                            location.reload();


                        }
                        else {

                            alert("entity scheduler not insert");

                        }

                    }

                });

            }else if($('#sch_repeat').val() == 1){
                $('#modalUpdate').show();

                $('#updateOne').on('click', function (e) {
                    console.log('helooo here')
                    e.preventDefault();
                    $('#updateOneValSch').val(1);
                    let url = $(this).data('url3');

                    $.ajax({
                        type: "POST",
                        url: url,
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1 ){
                                alert(res['id_scheduler']);
                                location.reload();

                            }

                        }

                    });


                });

                $('#updateAll').on('click', function (e) {
                    e.preventDefault();
                    $('#updateAllValSch').val(1);
                    let url = $(this).data('url3');

                    $.ajax({
                        type: "POST",
                        url: url,
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            // console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1 ){
                                alert(res['id_scheduler']);
                                location.reload();


                            }

                        }

                    });

                });


            }
        });

        $('#updatePublish').on('click', function (e) {
            e.preventDefault();

            $('#publicValue').val("1");
            // console.log(this);

            let url=$(this).data('url2');
            if($('#sch_repeat').val() == 0){

                $.ajax({
                    type: "POST",
                    url: url+"?publish=1",
                    data :$('#frmsubmitAssignShift').serialize(),
                    cache:false,

                    success: function (response){
                        //console.log(response);
                       let res=JSON.parse(response);
                        if(res.status ===1){
                            alert(res['id_scheduler']);
                            location.reload();


                        }
                        else {

                            alert("entity scheduler not insert");

                        }

                    }

                });

            }else if($('#sch_repeat').val() == 1){
                $('#modalUpdate').show();

                $('#updateOne').on('click', function (e) {
                    console.log('hello dssss')
                    e.preventDefault();
                    $('#updateOneValSch').val(1);
                    let url = $(this).data('url3');

                    $.ajax({
                        type: "POST",
                        url: url,
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1 ){
                                alert(res['id_scheduler']);
                                location.reload();

                            }

                        }

                    });


                });

                $('#updateAll').on('click', function (e) {
                    e.preventDefault();
                    $('#updateAllValSch').val(1);
                    let url = $(this).data('url3');

                    $.ajax({
                        type: "POST",
                        url: url,
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            // console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1 ){
                                alert(res['id_scheduler']);
                                location.reload();


                            }

                        }

                    });

                });

            }
        });

        $('#unPublishIT').on('click',function(e){
            e.preventDefault();
            let urll=$(this).data('url2');

            $.ajax({
                type: "POST",
                url: urll+'?unpublish=1',
                data :$('#frmsubmitAssignShift').serialize(),
                cache:false,

                success: function (response){
                    //console.log(response);
                    let res=JSON.parse(response);
                    if(res.status ===1){
                        alert(res['id_scheduler']);
                        location.reload();


                    }
                    else {

                        alert("entity scheduler not insert");

                    }

                }

            });

        });

    },
    eventMouseEnter:function(info){


          console.log('eventMouseEnter=');
          console.log( info);
          $('#hoverDel').on('click', function (e) {
                e.preventDefault();
                if (confirm("Are you sure?")) {
                    $('#myModal2').hide();
                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                    let id = info.event.id;
                    // console.log(id);

                    $.ajax({
                        type: "DELETE",
                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                        cache: false,

                        success: function (response) {
                            //console.log(response);
                            $('#myModal2').hide();

                            var res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res["id_deleted"]);
                                let idc = res["id_deleted"];
                                $('#' + idc).remove();
                                $("#lbl_msg_p").text("Deleted item was remove.");


                            }


                        }

                    });
                }



        });

        var timezone_offset_min = info.event.start.getTimezoneOffset(),
            offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
            offset_min = Math.abs(timezone_offset_min%60),
            timezone_standard;

        if(offset_hrs < 10)
            offset_hrs = '0' + offset_hrs;

        if(offset_min < 10)
            offset_min = '0' + offset_min;

        // Add an opposite sign to the offset
        // If offset is 0, it means timezone is UTC
        if(timezone_offset_min < 0)
            timezone_standard = '+' + offset_hrs + ':' + offset_min;
        else if(timezone_offset_min > 0)
            timezone_standard = '-' + offset_hrs + ':' + offset_min;
        else if(timezone_offset_min == 0)
            timezone_standard = 'Z';

        // Timezone difference in hours and minutes
        // String such as +5:30 or -6:00 or Z
        //console.log(timezone_standard);

        var newdateone;
        if(timezone_standard.substr(0,1) == '+'){

            var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


        }else if(timezone_standard.substr(0,1) == '-'){
            var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
        }

        var newdatetwo;
        if(timezone_standard.substr(0,1) == '+'){

            var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
            newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


        }else if(timezone_standard.substr(0,1) == '-'){
            var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
            newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
        }

        //tooltip
        var startDatetime =newdateone;
        var endDatetime=newdatetwo;

        var hoursS = startDatetime.getHours();
        var minutesS = "0" + startDatetime.getMinutes();
        var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

        var hoursE = endDatetime.getHours();
        var minutesE = "0" + endDatetime.getMinutes();
        var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

        var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

        var nu=Number((info.event.extendedProps.publish));

        if( nu ===0 )
        {

            var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
            info.el.style.backgroundImage='url(' + imageUrl + ')';

        }


      },
    eventMouseLeave:function(info){
          $('.custom').css('display','block');
          $('div.fc-content').removeClass('custom');
          //remove tooltip
          $('.editBtn').remove();
          $('.deleteBtn').remove();


      },
    dateClick: function(info){

         var eid=info.resource.id;
         var posname=[];
        $.ajax({
            url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
            success:function (response) {

                let resu=JSON.parse(response);
                console.log(resu);
                $.each(resu,function(e){
                    var id=(resu[e])["id"];



                    if(eid == id)
                    {
                        let pn=(resu[e])["position"];
                        posname.push(pn);

                    }
                });

                console.log('dateClick');
                console.log(info);
               // console.log("sample:"+info.dateStr)
                //console.log("sample:"+Date.parse(info.dateStr))

                var timezone_offset_min = info.date.getTimezoneOffset(),
                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                    offset_min = Math.abs(timezone_offset_min%60),
                    timezone_standard;

                if(offset_hrs < 10)
                    offset_hrs = '0' + offset_hrs;

                if(offset_min < 10)
                    offset_min = '0' + offset_min;

                // Add an opposite sign to the offset
                // If offset is 0, it means timezone is UTC
                if(timezone_offset_min < 0)
                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min > 0)
                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min == 0)
                    timezone_standard = 'Z';

                // Timezone difference in hours and minutes
                // String such as +5:30 or -6:00 or Z
                //console.log(timezone_standard);

                var newdateone;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }


               // console.log("new object"+newdateone)

                let startDate=info.date;
                let titleN =startDate.toString();
                let str = titleN.substring(0, 10);

                $('.titlebar').text('Create Shift on '+str);

                let y=(startDate.getFullYear()).toString();
                let mm;

                if((startDate.getMonth())<10) {
                    let m = (startDate.getMonth()+1).toString();
                    mm = "0"+m;
                }else {
                    mm = startDate.getMonth();
                }


                let ddd;
                if((startDate.getDate())<10){
                    let d = (startDate.getDate()).toString();
                    ddd = "0"+d;
                }else {
                    ddd=startDate.getDate();
                }

              //  console.log(startDate.getDate())

                let fullDate= y + "-" + mm + "-" + ddd;

              //  console.log('this is start date',fullDate);

                var res = newdateone.toTimeString();
                var fullTime=res.substring(0, 8);

                var modal = document.getElementById('myModal');
                var modal2 = document.getElementById('myModal2');

                modal.style.display = "block";

                 var footer2 = document.getElementById('foot2');
                footer2.style.display = "block";

                if(info.resource.id == 0){

                    $('.custblock').show();
                }
              else {

                    $('span.tag-position').each(function (index) {
                       // console.log('hi each')
                       // console.log(index)


                        var textPos = $(this).text();
                        $($(this).context.parentElement.parentElement).hide();

                        for(var i in posname) {
                            if (posname[i] == textPos) {
                                // console.log($(this).context.parentElement.parentElement)
                                $($(this).context.parentElement.parentElement).show();
                            }
                        }


                    });
                }


                let employee=info.resource.id;
                $('#employee_id_').val(employee);
               $('#employee_id').val(employee);

                $('.page-head').hide();



                $('.time-block').on('click' , function(e) {
                   // console.log(e);
                  //  console.log('hi ajax');


                    modal.style.display = "none";

                    let url2=$('#myModal').data('url2');
                    //let id_shift_selected=$('.time-block').data('id');

                    let shift_id=e.currentTarget.attributes[1].nodeValue;

                        $.ajax({
                            type: "POST",
                            url: url2,
                            data:{
                               id_shift:shift_id,
                               id_employee:employee,
                                startDate:fullDate,
                                endDate:fullDate,
                                value:1

                            },
                            cache:false,

                            success: function (response){
                                let res=JSON.parse(response);

                                // console.log(res.row);
                                if(res.status ===1 ) {
                                    alert(res.rowScheduler);
                                    location.reload();

                                }


                            }

                        })
                    });

                $('.show-icon').on('click' , function(e) {
                    //console.log('custom e',e)
                    $('#myModal').hide();
                    $('#myModal2').show();
                    $('#schedule__id').val(conceptSchedule);
                    $('#employee_id').val(employee);
                    $('#start_date').val(fullDate);
                    $('#start_time').val(fullTime);
                    //console.log(e);
                    let url=$('#myModal').data('url');
                    //let shift_id=$('#myModal').data('id');

                    //let data=$('#myModal').data('value');
                    let id=e.target.parentElement.attributes[1].nodeValue;
                    if(id !== "0"){
                        $.ajax({
                            url: url+"?"+ $.param({Id_update_shift_scheduler: id,schedule_id:conceptSchedule}),
                            cache:false,
                            method: 'GET',
                            success: function (response) {
                                let res=JSON.parse(response);
                                console.log(res);

                                if(res.status ===1 ) {
                                    //alert((res.row[0]).id);
                                    let i=(res.row[0]).id;
                                    let f= (res.row[0])["finish_time"];
                                    let s= (res.row[0])["start_time"];
                                    let u=(res.row[0])["unpaid_break"];
                                    let n=(res.row[0])["note"];
                                    let po=(res.row[0])["position_id"];

                                    let select = document.getElementById('job_id');

                                    console.log('job site',res.jsite);
                                    let js=res.jsite;
                                    for(let s=0;s<js.length;++s){
                                        let idj=(js[s])["id"];
                                        let namej=(js[s])["name"];


                                        var opt = document.createElement('option');
                                        opt.value = idj;
                                        opt.innerHTML = namej;
                                        select.appendChild(opt);
                                    }

                                    $('#pos_id').val(po);
                                    $('#_time').val(s);
                                    $('#un_break').val(u);
                                    $('#time_to').val(f);
                                    $('#note_').val(n);

                                    $('#id_edited_shift').val(i);

                                }


                            }
                        });
                    }




                });

                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function(event) {
                    if (event.target == modal) {
                        modal.style.display = "none";
                    }
                    if (event.target == modal2) {
                        modal2.style.display = "none";
                    }
                };




            }
        });
    },

    eventResize: function(info) {
          alert(info.event.title + " end is now " + info.event.end.toISOString());


          if (!confirm("is this okay?")) {
              info.revert();
          }else {
              alert('accept resize');
              console.log('hello resize');
              console.log(info);


              var id = info.event.id;


              var startObj=info.event.start;
              var timezone_offset_min = startObj.getTimezoneOffset(),
                  offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                  offset_min = Math.abs(timezone_offset_min%60),
                  timezone_standard;

              if(offset_hrs < 10)
                  offset_hrs = '0' + offset_hrs;

              if(offset_min < 10)
                  offset_min = '0' + offset_min;

              // Add an opposite sign to the offset
              // If offset is 0, it means timezone is UTC
              if(timezone_offset_min < 0)
                  timezone_standard = '+' + offset_hrs + ':' + offset_min;
              else if(timezone_offset_min > 0)
                  timezone_standard = '-' + offset_hrs + ':' + offset_min;
              else if(timezone_offset_min == 0)
                  timezone_standard = 'Z';

              // Timezone difference in hours and minutes
              // String such as +5:30 or -6:00 or Z
              //console.log(timezone_standard);

              var newdateone;
              if(timezone_standard.substr(0,1) == '+'){

                  var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                  newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


              }else if(timezone_standard.substr(0,1) == '-'){
                  var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                  newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
              }

              var res = newdateone.toTimeString();
              var startFullTime=res.substring(0, 8);



              var endObj=info.event.end;

              var timezone_offset_min1 = endObj.getTimezoneOffset(),
                  offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                  offset_min1 = Math.abs(timezone_offset_min1%60),
                  timezone_standard1;

              if(offset_hrs1 < 10)
                  offset_hrs1 = '0' + offset_hrs1;

              if(offset_min1 < 10)
                  offset_min1 = '0' + offset_min1;

              // Add an opposite sign to the offset
              // If offset is 0, it means timezone is UTC
              if(timezone_offset_min1 < 0)
                  timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
              else if(timezone_offset_min > 0)
                  timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
              else if(timezone_offset_min1 == 0)
                  timezone_standard1 = 'Z';

              // Timezone difference in hours and minutes
              // String such as +5:30 or -6:00 or Z
              //console.log(timezone_standard);

              var newdateone1;
              if(timezone_standard1.substr(0,1) == '+'){

                  var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                  newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


              }else if(timezone_standard.substr(0,1) == '-'){
                  var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                  newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
              }


              var res1 = newdateone1.toTimeString();
              var endFullTime=res1.substring(0, 8);
              var posId=info.event.extendedProps['position_id'];



                  $.ajax({
                      type: "POST",
                      url: baseUri + 'modules/workplan/classes/action/frm.php',
                      data: {
                          id: id,
                          startTime:startFullTime,
                          endTime:endFullTime,
                          positionID:posId,
                          resizeEv:1


                      },
                      cache: false,
                      success: function (response) {
                          // console.log(response);
                          let res = JSON.parse(response);
                          if (res.status === 1) {
                              alert(res['id_scheduler_updated']);
                              location.reload();


                          }
                          else
                              alert('an error occured when updating scheduler!');
                          info.revert();

                      }

                  });




          }
      },
    eventDrop: function(info) {
        console.log('hello drop');
        console.log(info);
         // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

          if (!confirm("Are you sure about this change?")) {
             info.revert();
          }else {
              alert('accept drop');


              var id = info.event.id;
              var posId=info.oldEvent.extendedProps['position_id'];


              var startObj=info.event.start;
              var endObj=info.event.end;

              let yy=(startObj.getFullYear()).toString();
              let mmm;
              if((startObj.getMonth())<10) {
                  let m = (startObj.getMonth()+1).toString();
                  mmm = "0"+m;
              }
              let dd =(startObj.getDate()).toString();
              let dateStart= yy + "-" + mmm + "-" + dd;

              let y=(endObj.getFullYear()).toString();
              let mm;
              if((endObj.getMonth())<10) {
                  let m = (endObj.getMonth()+1).toString();
                  mm = "0"+m;
              }
              let d =(endObj.getDate()).toString();
              let dateEnd= y + "-" + mm + "-" + d;


              //set time wih tiemzone

              var timezone_offset_min = startObj.getTimezoneOffset(),
                  offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                  offset_min = Math.abs(timezone_offset_min%60),
                  timezone_standard;

              if(offset_hrs < 10)
                  offset_hrs = '0' + offset_hrs;

              if(offset_min < 10)
                  offset_min = '0' + offset_min;

              // Add an opposite sign to the offset
              // If offset is 0, it means timezone is UTC
              if(timezone_offset_min < 0)
                  timezone_standard = '+' + offset_hrs + ':' + offset_min;
              else if(timezone_offset_min > 0)
                  timezone_standard = '-' + offset_hrs + ':' + offset_min;
              else if(timezone_offset_min == 0)
                  timezone_standard = 'Z';

              // Timezone difference in hours and minutes
              // String such as +5:30 or -6:00 or Z
              //console.log(timezone_standard);

              var newdateone;
              if(timezone_standard.substr(0,1) == '+'){

                  var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                  newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


              }else if(timezone_standard.substr(0,1) == '-'){
                  var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                  newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
              }

              var res = newdateone.toTimeString();
              var startFullTime=res.substring(0, 8);

             // console.log(startFullTime)

              var timezone_offset_min1 = endObj.getTimezoneOffset(),
                  offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                  offset_min1 = Math.abs(timezone_offset_min1%60),
                  timezone_standard1;

              if(offset_hrs1 < 10)
                  offset_hrs1 = '0' + offset_hrs1;

              if(offset_min1 < 10)
                  offset_min1 = '0' + offset_min1;

              // Add an opposite sign to the offset
              // If offset is 0, it means timezone is UTC
              if(timezone_offset_min1 < 0)
                  timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
              else if(timezone_offset_min > 0)
                  timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
              else if(timezone_offset_min1 == 0)
                  timezone_standard1 = 'Z';

              // Timezone difference in hours and minutes
              // String such as +5:30 or -6:00 or Z
              //console.log(timezone_standard);

              var newdateone1;
              if(timezone_standard1.substr(0,1) == '+'){

                  var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                  newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


              }else if(timezone_standard.substr(0,1) == '-'){
                  var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                  newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
              }


              var res1 = newdateone1.toTimeString();
              var endFullTime=res1.substring(0, 8);


              if (info.newResource == null) {
                  console.log('newResource is null:'+info.newResource);
                  var emploID=info.oldEvent._def.resourceIds[0];

                  $.ajax({
                      type: "POST",
                      url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                      data: {
                          id: id,
                          startDate:dateStart,
                          startTime:startFullTime,
                          endDate:dateEnd,
                          endTime:endFullTime,
                          positionID:posId,
                          emID:emploID,
                          resource:0

                      },
                      cache: false,
                      success: function (response) {
                         // console.log(response);
                          let res = JSON.parse(response);
                          if (res.status === 1) {
                              alert(res['id_scheduler_updated']);
                              location.reload();

                          }
                          else
                              alert('an error occured when updating scheduler!');
                          info.revert();

                      }

                  });

              } else if(info.newResource !== null){
                  console.log('newResource no null:'+info.newResource.id)

                  var emploID=info.newResource.id;

                  $.ajax({
                      type: "POST",
                      url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                      data: {
                          id: id,
                          startDate:dateStart,
                          startTime:startFullTime,
                          endDate:dateEnd,
                          endTime:endFullTime,
                          positionID:posId,
                          emID:emploID,
                          resource:1

                      },
                      cache: false,
                      success: function (response) {
                          // console.log(response);
                          let res = JSON.parse(response);
                          if (res.status === 1) {
                              alert(res['id_scheduler_updated']);
                              location.reload();

                          }
                          else
                              alert('an error occured when updating scheduler!');
                          info.revert();

                      }

                  });

              }


          }
      },
      /*eventDestroy:function(){
          alert('hi delete');
      },*/
    dayRender:function( dayRenderInfo ) {
          console.log('hi day render');
          console.log(dayRenderInfo);
      },
    datesRender:function(datesRenderInfo){
          console.log('hi dates Render');
          console.log(datesRenderInfo);
        let activeStart=datesRenderInfo.view.activeStart;


        let yy=(activeStart.getFullYear()).toString();
        let mmm;
        if((activeStart.getMonth())<10) {
            let m = (activeStart.getMonth()+1).toString();
            mmm = "0"+m;
        }
        let dd ;
        if(activeStart.getDate()<10){
            let calstart=(activeStart.getDate()).toString();
            dd="0"+calstart;

        }else{
            dd=(activeStart.getDate()).toString();

        }

        let dateStart= yy + "-" + mmm + "-" + dd;
        console.log('activeStart',dateStart);
        $('#start_date_').val(dateStart);
        $('#end_date_').val(dateStart);

    },
    aspectRatio: 1.5,
    scrollTime: '0:00',
    header: {
      left: 'promptResource today prev,next',
      center: 'title',
      right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
    },
      /*footer: {
          left: 'promptResource today prev,next',
          center: 'title',
          right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
      },*/
    customButtons: {
      promptResource: {
        text: '+ Employee',
        click: function() {
            alert('hi employee');
            //open modal
          /*var title = prompt('Employee name');
          if (title) {
            calendar.addResource({
              title: title
            });
          }*/
        }
      }
    },
    businessHours: {
          // days of week. an array of zero-based day of week integers (0=Sunday)
          daysOfWeek: [ 1, 2, 3, 4 ], // Monday - Thursday
          startTime: '12:00', // a start time (10am in this example)
          endTime: '18:00', // an end time (6pm in this example)
      },
    defaultView: 'resourceTimelineDay',


    resourceLabelText: 'Employees',
    resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule ,
    events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
  });



  calendar.render();

    calendar.on('dateClick', function(info) {
        console.log('clicked on ' + info.dateStr);
    });

    $('#schedule_id').on('change',()=> {


        calendar.destroy();
        $('.btnEmplo').css('background-color','gainsboro');
        $('.btnPos').css('background-color','none');
        $('#typeOfSch').val(1);
        $("#chbox-1").prop("checked", false);
        $("#chbox-2").prop("checked", false);
        totAssign=[];
        combined=[];
        openshift=0;
        var conceptSchedule = $('#schedule_id').find(":selected").val();
        console.log(conceptSchedule);
        $('.block').html('');
        let url=$('#myModal').data('url');
        $.ajax({
            url: url,
            cache:false,
            data:{
                "getShifttemplates":1,
                "scheduleID": conceptSchedule
            },
            method: 'GET',
            success: function (response) {
                let res=JSON.parse(response);
                console.log('shift templates',res);
                var shifttemp=res.shifts;
                if(res.status==1) {
                    let i;
                    for(i=0;i<shifttemp.length;i++)
                    {
                        let id= (res.shifts[i])["id_shift"];
                        let stime= (res.shifts[i])["started"];
                        let ftime= (res.shifts[i])["finished"];
                        let pos= (res.shifts[i])["pos_name"];

                        $('.block').append('<div class="form-group custblock" ><div class="time-block col-xs-6" data-id="'+id+'" style="padding: 6px;height: 40px;"><span class="show-time"><small>'+stime+" - "+ftime+'</small></span></div><div class="show-pos"><span class="tag-position">'+pos+'</span></div><div class="show-icon" data-id="'+id+'"><i class="icon-pencil"></i></div></div>');

                    }

                    $('.textTop').text(res.notifyMsg);
                }

            }
        });
        //var calendarEl = document.getElementById('calendar');
         calendar = new FullCalendar.Calendar(calendarEl, {
            timeZone: 'UTC',
            plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
            resourceAreaWidth: 230,
            editable: true,
            selectable:true,
            //eventColor: '#e63d90',
            displayEventTime:true,
            displayEventEnd:true,
            eventBorderColor:'white',
            eventTextColor:'black',
            eventRender: function(info) {
                console.log('hi event render');
                if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                    info.el.append(info.event.extendedProps.description)
                }

                var startDatetime =info.event.start;
                var endDatetime=info.event.end;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }
                var tooltip = new Tooltip(info.el, {
                    title: toolText,
                    placement: 'top',
                    trigger:'hover ',
                    container: 'body'
                });



            },
            eventClick: function(info) {


                console.log('eventClick');
                console.log(info);

                let startDate=info.event.start;

                let titleN =startDate.toString();
                let str = titleN.substring(0, 10);

                $('.titlebar').text('Edit Shift on '+str);
                $('.titlebarDelete').text('Delete Shift on '+str);





                let y=(startDate.getFullYear()).toString();
                let mm;
                if((startDate.getMonth())<10) {
                    let m = (startDate.getMonth()+1).toString();
                    mm = "0"+m;


                }
                let d =(startDate.getDate()).toString();
                let fullDate= y + "-" + mm + "-" + d;

                var fullTime = startDate.toTimeString();

                var modal2 = document.getElementById('myModal2');
                modal2.style.display = "block";

                var footer3 = document.getElementById('foot3');
                footer3.style.display = "block";




                let employee=info.event._def.resourceIds[0];
                $('#employee_id').val(employee);

                $('.page-head').hide();

                $('#start_date').val(fullDate);
                $('#start_time').val(fullTime);
                //console.log(e);
                let url=$('#myModal2').data('url');
                let id =info.event.id;

                //console.log(id);
                $.ajax({
                    url: url+"?"+ $.param({Id_update_scheduler: id}),
                    cache:false,
                    method: 'GET',
                    success: function (response) {
                        let res=JSON.parse(response);
                        console.log('check me')
                        console.log(res);

                        if(res.status ===1 ) {
                            // alert((res.row[0]).id);
                            let i=(res.rowShift[0]).id;
                            let f= (res.rowShift[0])["finish_time"];
                            let s= (res.rowShift[0])["start_time"];
                            let u=(res.rowShift[0])["unpaid_break"];
                            let n=(res.rowShift[0])["note"];
                            let po=(res.rowShift[0])["position_id"];
                            let shS=(res.rowShift[0])["status"];



                            $('#pos_id').val(po);
                            $('#_time').val(s);
                            $('#un_break').val(u);
                            $('#time_to').val(f);
                            $('#note_').val(n);
                            $('#shift_status').val(shS);


                            $('#id_edited_shift').val(i);



                            let pub= (res.rowScheduler[0])["publish"];
                            let idsche= (res.rowScheduler[0])["id"];
                            let j= (res.rowScheduler[0])["jobsite_id"];
                            let rshift= (res.rowScheduler[0])["repeat_shift"];
                            let revery= (res.rowScheduler[0])["repeat_every"];
                            let end= (res.rowScheduler[0])["end_date"];
                            let endRep= (res.rowScheduler[0])["end_repeat"];

                            let schSH= (res.rowScheduler[0])["status"];
                            let start= (res.rowScheduler[0])["start_date"];

                            $('#start_date').val(start);
                            $('#id_ed_scheduler2').val(idsche);
                            $('#job_id').val(j);
                            $('#repeat_shift').val(rshift);
                            $('#every').val(revery);
                            $('#ended_date').val(end);
                            //$('#publicValue').val(pub);
                            $('#scheduler_status').val(schSH);

                            if(pub == 1){
                                $('#submitAssignShiftEdit').hide();
                                $('#unPublishIT').show();
                            }else if(pub ==0){
                                $('#submitAssignShiftEdit').show();
                                $('#unPublishIT').hide();
                            }


                            if(rshift == 0){

                                $('#sch_repeat').val("0");

                                $('#repeat_shift').prop('checked',false);
                                // $('#unPublishIT').prop("disabled",false);
                                // $('#updatePublish').prop("disabled",false);




                            }else if(rshift==1){
                                $('#sch_repeat').val("1");

                                $('#repeat_shift').prop('checked',true);
                                $('#ended_date').val(endRep);
                                $('#every').val(revery);
                                $('.custshow').css('display', 'block');
                                //  $('#unPublishIT').prop("disabled",true);
                                // $('#updatePublish').prop("disabled",true);
                                // $('#unPublishIT').show();
                                $('#updatePublish').show();

                            }

                        }

                    }
                });



                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function(event) {

                    if (event.target == modal2) {
                        modal2.style.display = "none";
                    }
                };


                $('#deleteAssignShift').on('click',function (e) {
                    e.preventDefault();
                    if($('#sch_repeat').val() == 0){


                        if (confirm("Are you sure?")) {
                            let url = $(this).data('url');
                            var id_d=info.event.id;

                            // console.log(id);

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        location.reload();

                                    }


                                }

                            });
                        }




                    }else if($('#sch_repeat').val() == 1){

                        $('#modalDelete').show();

                        $('#deleteAll').on('click', function (e) {
                            e.preventDefault();

                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#modalPrefer').hide();
                                        $('#modalDelete').hide();
                                        location.reload();

                                    }


                                }

                            })

                        });

                        $('#deleteOne').on('click', function (e) {
                            e.preventDefault();
                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#myModal2').hide();
                                        $('#modalDelete').hide();
                                        info.el.remove();

                                    }


                                }

                            })

                        });

                    }

                });

                $('#submitAssignShiftEdit').on('click', function (e) {
                    e.preventDefault();
                    // console.log(this);

                    let url2=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url2,
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('helooo here')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });


                    }
                });

                $('#updatePublish').on('click', function (e) {
                    e.preventDefault();

                    $('#publicValue').val("1");
                    // console.log(this);

                    let url=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url+'?publish=1',
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('hello dssss')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });

                    }
                });

                $('#unPublishIT').on('click',function(e){
                    e.preventDefault();
                    let urll=$(this).data('url2');

                    $.ajax({
                        type: "POST",
                        url: urll+'?unpublish=1',
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            //console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1){
                                alert(res['id_scheduler']);
                                location.reload();


                            }
                            else {

                                alert("entity scheduler not insert");

                            }

                        }

                    });

                });

            },
            eventMouseEnter:function(info){
                console.log('eventMouseEnter=');
                console.log( info);

                //console.log(typeof (info.el));
                // var dlbtn = document.createElement("Button");// Create a <li> node
                //  var edbtn = document.createElement("Button");                 // Create a <li> node

                // var textnodeE = document.createTextNode("Edit");
                //  var textnodeD = document.createTextNode("Delete");// Create a text node
                // var edicon = document.createElement("i");// Create a text node

                //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                // edbtn.appendChild(textnodeE);
                // dlbtn.className="deleteBtn";


                // dlbtn.setAttribute('id','hoverDel');



                // edbtn.className="editBtn";
                // edicon.className='fas';
                // edicon.classList.add("fa-edit");
                // info.el.children[0].classList.add('custom');

                //console.log("it is here");
                //console.log((info.el.children[0]).children[0]);

                // $('.custom').css('display','none');
                //edbtn.appendChild(edicon);
                // info.el.appendChild(dlbtn);
                // info.el.appendChild(edbtn);


                $('#hoverDel').on('click', function (e) {


                    e.preventDefault();


                    if (confirm("Are you sure?")) {
                        $('#myModal2').hide();
                        let url = baseUri+'modules/workplan/classes/action/frm.php';
                        let id = info.event.id;
                        // console.log(id);

                        $.ajax({
                            type: "DELETE",
                            url: url + "?" + $.param({Id_delete_scheduler: id}),
                            cache: false,

                            success: function (response) {
                                //console.log(response);
                                $('#myModal2').hide();

                                var res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res["id_deleted"]);
                                    let idc = res["id_deleted"];
                                    $('#' + idc).remove();
                                    $("#lbl_msg_p").text("Deleted item was remove.");


                                }


                            }

                        });
                    }



                });

                var timezone_offset_min = info.event.start.getTimezoneOffset(),
                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                    offset_min = Math.abs(timezone_offset_min%60),
                    timezone_standard;

                if(offset_hrs < 10)
                    offset_hrs = '0' + offset_hrs;

                if(offset_min < 10)
                    offset_min = '0' + offset_min;

                // Add an opposite sign to the offset
                // If offset is 0, it means timezone is UTC
                if(timezone_offset_min < 0)
                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min > 0)
                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min == 0)
                    timezone_standard = 'Z';

                // Timezone difference in hours and minutes
                // String such as +5:30 or -6:00 or Z
                //console.log(timezone_standard);

                var newdateone;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                var newdatetwo;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                //tooltip
                var startDatetime =newdateone;
                var endDatetime=newdatetwo;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }

            },
            eventMouseLeave:function(info){
                $('.custom').css('display','block');
                $('div.fc-content').removeClass('custom');
                //remove tooltip
                $('.editBtn').remove();
                $('.deleteBtn').remove();


            },
            dateClick: function(info){

                var eid=info.resource.id;
                var posname=[];
                $.ajax({
                    url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                    success:function (response) {

                        res=JSON.parse(response);
                        console.log(res);
                        $.each(res,function(e){
                            var id=(res[e])["id"];



                            if(eid == id)
                            {
                                let pn=(res[e])["position"];
                                posname.push(pn);

                            }
                        });

                        console.log('dateClick');
                        console.log(info);
                        // console.log("sample:"+info.dateStr)
                        //console.log("sample:"+Date.parse(info.dateStr))

                        var timezone_offset_min = info.date.getTimezoneOffset(),
                            offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                            offset_min = Math.abs(timezone_offset_min%60),
                            timezone_standard;

                        if(offset_hrs < 10)
                            offset_hrs = '0' + offset_hrs;

                        if(offset_min < 10)
                            offset_min = '0' + offset_min;

                        // Add an opposite sign to the offset
                        // If offset is 0, it means timezone is UTC
                        if(timezone_offset_min < 0)
                            timezone_standard = '+' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min > 0)
                            timezone_standard = '-' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min == 0)
                            timezone_standard = 'Z';

                        // Timezone difference in hours and minutes
                        // String such as +5:30 or -6:00 or Z
                        //console.log(timezone_standard);

                        var newdateone;
                        if(timezone_standard.substr(0,1) == '+'){

                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                        }else if(timezone_standard.substr(0,1) == '-'){
                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                        }


                        // console.log("new object"+newdateone)

                        let startDate=info.date;
                        let titleN =startDate.toString();
                        let str = titleN.substring(0, 10);

                        $('.titlebar').text('Create Shift on '+str);

                        let y=(startDate.getFullYear()).toString();
                        let mm;

                        if((startDate.getMonth())<10) {
                            let m = (startDate.getMonth()+1).toString();
                            mm = "0"+m;
                        }else {
                            mm = startDate.getMonth();
                        }


                        let ddd;
                        if((startDate.getDate())<10){
                            let d = (startDate.getDate()).toString();
                            ddd = "0"+d;
                        }else {
                            ddd=startDate.getDate();
                        }

                        //  console.log(startDate.getDate())

                        let fullDate= y + "-" + mm + "-" + ddd;

                        //  console.log('this is start date',fullDate);

                        var res = newdateone.toTimeString();
                        var fullTime=res.substring(0, 8);

                        var modal = document.getElementById('myModal');
                        var modal2 = document.getElementById('myModal2');

                        modal.style.display = "block";

                        var footer2 = document.getElementById('foot2');
                        footer2.style.display = "block";

                        if(info.resource.id == 0){
                            $('.custblock').show();
                        }
                        else {
                            $('span.tag-position').each(function (index) {
                                //  console.log('hi each')
                                //console.log(index)


                                var textPos = $(this).text();
                                $($(this).context.parentElement.parentElement).hide();

                                for(var i in posname) {
                                    if (posname[i] == textPos) {
                                        // console.log($(this).context.parentElement.parentElement)
                                        $($(this).context.parentElement.parentElement).show();
                                    }
                                }


                            });
                        }


                        let employee=info.resource.id;
                        $('#employee_id_').val(employee);
                        $('#employee_id').val(employee);

                        $('.page-head').hide();



                        $('.time-block').on('click' , function(e) {
                            // console.log(e);
                            //  console.log('hi ajax');


                            modal.style.display = "none";

                            let url2=$('#myModal').data('url2');
                            //let id_shift_selected=$('.time-block').data('id');

                            let shift_id=e.currentTarget.attributes[1].nodeValue;

                            $.ajax({
                                type: "POST",
                                url: url2,
                                data:{
                                    id_shift:shift_id,
                                    id_employee:employee,
                                    startDate:fullDate,
                                    endDate:fullDate,
                                    value:1

                                },
                                cache:false,

                                success: function (response){
                                    let res=JSON.parse(response);

                                    // console.log(res.row);
                                    if(res.status ===1 ) {
                                        alert(res.rowScheduler);
                                        location.reload();

                                    }


                                }

                            })
                        });

                        $('.show-icon').on('click' , function(e) {
                            $('#myModal').hide();
                            $('#myModal2').show();
                            $('#employee_id').val(employee);
                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            $('#schedule__id').val(conceptSchedule);
                            //console.log(e);
                            let url=$('#myModal').data('url');
                            //let shift_id=$('#myModal').data('id');

                            //let data=$('#myModal').data('value');
                            let id=e.target.parentElement.attributes[1].nodeValue;
                            if(id !== "0") {
                                //console.log(id);
                                $.ajax({
                                    url: url + "?" + $.param({
                                        Id_update_shift_scheduler: id,
                                        schedule_id: conceptSchedule
                                    }),
                                    cache: false,
                                    method: 'GET',
                                    success: function (response) {
                                        let res = JSON.parse(response);
                                        console.log(res);

                                        if (res.status === 1) {
                                            //alert(res.jsite);
                                            let i = (res.row[0]).id;
                                            let f = (res.row[0])["finish_time"];
                                            let s = (res.row[0])["start_time"];
                                            let u = (res.row[0])["unpaid_break"];
                                            let n = (res.row[0])["note"];
                                            let po = (res.row[0])["position_id"];
                                            let select = document.getElementById('job_id');

                                            // console.log('job site',res.jsite);
                                            let js = res.jsite;
                                            for (let s = 0; s < js.length; ++s) {
                                                let idj = (js[s])["id"];
                                                let namej = (js[s])["name"];


                                                var opt = document.createElement('option');
                                                opt.value = idj;
                                                opt.innerHTML = namej;
                                                select.appendChild(opt);
                                            }


                                            $('#pos_id').val(po);
                                            $('#_time').val(s);
                                            $('#un_break').val(u);
                                            $('#time_to').val(f);
                                            $('#note_').val(n);

                                            $('#id_edited_shift').val(i);

                                        }


                                    }
                                });
                            }


                        });

                        // When the user clicks anywhere outside of the modal, close it
                        window.onclick = function(event) {
                            if (event.target == modal) {
                                modal.style.display = "none";
                            }
                            if (event.target == modal2) {
                                modal2.style.display = "none";
                            }
                        };




                    }
                });
            },
            eventResize: function(info) {
                alert(info.event.title + " end is now " + info.event.end.toISOString());


                if (!confirm("is this okay?")) {
                    info.revert();
                }else {
                    alert('accept resize');
                    console.log('hello resize');
                    console.log(info);


                    var id = info.event.id;


                    var startObj=info.event.start;

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);



                    var endObj=info.event.end;

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);
                    var posId=info.event.extendedProps['position_id'];



                    $.ajax({
                        type: "POST",
                        url: baseUri + 'modules/workplan/classes/action/frm.php',
                        data: {
                            id: id,
                            startTime:startFullTime,
                            endTime:endFullTime,
                            positionID:posId,
                            resizeEv:1


                        },
                        cache: false,
                        success: function (response) {
                            // console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res['id_scheduler_updated']);
                                location.reload();


                            }
                            else
                                alert('an error occured when updating scheduler!');
                            info.revert();

                        }

                    });




                }
            },
            eventDrop: function(info) {
                console.log('hello drop');
                console.log(info);
                // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                if (!confirm("Are you sure about this change?")) {
                    info.revert();
                }else {
                    alert('accept drop');


                    var id = info.event.id;
                    var posId=info.oldEvent.extendedProps['position_id'];


                    var startObj=info.event.start;
                    var endObj=info.event.end;

                    let yy=(startObj.getFullYear()).toString();
                    let mmm;
                    if((startObj.getMonth())<10) {
                        let m = (startObj.getMonth()+1).toString();
                        mmm = "0"+m;
                    }
                    let dd =(startObj.getDate()).toString();
                    let dateStart= yy + "-" + mmm + "-" + dd;

                    let y=(endObj.getFullYear()).toString();
                    let mm;
                    if((endObj.getMonth())<10) {
                        let m = (endObj.getMonth()+1).toString();
                        mm = "0"+m;
                    }
                    let d =(endObj.getDate()).toString();
                    let dateEnd= y + "-" + mm + "-" + d;


                    //set time wih tiemzone

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);

                    // console.log(startFullTime)

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);


                    if (info.newResource == null) {
                        console.log('newResource is null:'+info.newResource);
                        var emploID=info.oldEvent._def.resourceIds[0];

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:0

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    } else if(info.newResource !== null){
                        console.log('newResource no null:'+info.newResource.id)

                        var emploID=info.newResource.id;

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:1

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    }


                }
            },
             resourceRender: async function(renderInfo) {
                 console.log('hi render resource')
                 console.dir(renderInfo)

                 console.log('changing schedule',imgNo);

                 let img=renderInfo.resource.extendedProps.img;
                 renderInfo.el.style.backgroundColor = 'lightyellow';
                 if(renderInfo.resource.id !== "0")
                 {
                     $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                     if(!img ){

                         $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                     }else {

                         $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                     }


                 }else{
                     $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                     $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                 }
                 let calBud=0;

                 let currentStart=renderInfo.view.currentStart;
                 let yy=(currentStart.getFullYear()).toString();
                 let mmm;
                 if((currentStart.getMonth())<10) {
                     let m = (currentStart.getMonth()+1).toString();
                     mmm = "0"+m;
                 }
                 let dd ;
                 if(currentStart.getDate()<10){
                     let calstart=(currentStart.getDate()).toString();
                     dd="0"+calstart;

                 }else{
                     dd=(currentStart.getDate()).toString();

                 }

                 let dateStart= yy + "-" + mmm + "-" + dd;


                 let currentEnd=renderInfo.view.currentEnd;
                 let yy1=(currentEnd.getFullYear()).toString();
                 let mmm1;
                 if((currentEnd.getMonth())<10) {
                     let m1 = (currentEnd.getMonth()+1).toString();
                     mmm1 = "0"+m1;
                 }
                 let dd1 ;

                 if(currentEnd.getDate()<10){
                     let calend=(currentEnd.getDate()).toString();
                     dd1="0"+calend;

                 }else{
                     dd1=(currentEnd.getDate()).toString();

                 }
                 let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                 console.log('calendar date start and end ',dateStart,dateEnd)



                 let eventss=await new Promise(resolve => {
                     setTimeout(()=>{
                         resolve(renderInfo.resource.getEvents());
                     },1000)});

                 console.log('getEvents',eventss,eventss.length);


                 for(let h=0;h<eventss.length;h++){
                     //console.log('arr first',eventss[h].start,eventss[h].end);
                     var start1=eventss[h].start;
                     let yy11=(start1.getFullYear()).toString();
                     let mmm11;
                     if((start1.getMonth())<10) {
                         let m11 = (start1.getMonth()+1).toString();
                         mmm11 = "0"+m11;
                     }
                     // let dd11 =(start1.getDate()).toString();
                     let dd11;
                     if(start1.getDate() < 10 ){
                         let nnmm=(start1.getDate()).toString();
                         dd11="0"+nnmm;
                     }else {
                         dd11=(start1.getDate()).toString();
                     }

                     let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                     let end1=eventss[h].end;
                     let yy22=(end1.getFullYear()).toString();
                     let mmm22;
                     if((end1.getMonth())<10) {
                         let m112 = (end1.getMonth()+1).toString();
                         mmm22 = "0"+m112;
                     }
                     // let dd22 =(end1.getDate()).toString();
                     let dd22;
                     if(end1.getDate() < 10 ){
                         let ssaa=(end1.getDate()).toString();
                         dd22="0"+ssaa;

                     }else {
                         dd22=(end1.getDate()).toString();
                     }

                     let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                     console.log('events date',eveStartt,eveEnddd)

                     let numBudget=0;
                     if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                     {
                         console.log('calculating time');
                         let dif=end1.getTime() - start1.getTime();
                         var diffHrs = Math.floor((dif % 86400000) / 3600000);

                         numBudget = diffHrs;
                         console.log(Number(numBudget));

                     }
                     calBud += Number(numBudget);
                     console.log('in the loop',calBud)


                 }
                 console.log('calculatebud',calBud);

                 if(renderInfo.resource.id !== "0")
                 {
                     console.log('append')
                     $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                     totAssign.push(calBud);
                 }else{
                     openshift=calBud;
                 }

                 combined.push(calBud);


                 //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                 $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");



             },

            aspectRatio: 1.5,
            scrollTime: '07:00',
            header: {
                left: 'promptResource today prev,next',
                center: 'title',
                right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
            },
            customButtons: {
                promptResource: {
                    text: '+ Employee',
                    click: function() {
                        alert('hi employee');
                        //open modal
                        /*var title = prompt('Employee name');
                        if (title) {
                          calendar.addResource({
                            title: title
                          });
                        }*/
                    }
                }
            },
            defaultView: 'resourceTimelineDay',

            resourceLabelText: 'Employees',
            resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
            events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
        });

        calendar.render();
        $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
        $('#resFoot').append("<span class='total'></span>");


        $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
        $('#calFoot').append("<table><tr></tr></table>");
        $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

        $('.dropbtnp').on('click',function () {
            $('ul.content-ul').toggle();
        });


        $('ul.content-ul li').on('click',function(e){
            e.preventDefault();
            console.log('on click',this);
            $('ul.content-ul').css('display','none');
            let txtTot=$(this).text();
            $('span.title').text(txtTot);
            if(txtTot == "OpenShift Total"){
                $('.total').text(openshift+" Hours")
            }else if(txtTot == "Combined Total"){
                $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
            }else if(txtTot == "Assigned Total"){
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
            }


        });

    });

    $('.btnPos').on('click',()=> {
        alert('hi position');
        $("#chbox-1").prop("checked", false);
        $("#chbox-2").prop("checked", false);

        calendar.destroy();
        $('#typeOfSch').val(2);

        $('.btnPos').css('background-color','gainsboro');
        $('.btnEmplo').css('background-color','none');
        totAssign=[];
        combined=[];
        openshift=0;
        var conceptSchedule = $('#schedule_id').find(":selected").val();
        console.log("schedule",conceptSchedule);
       // var calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
            timeZone: 'UTC',
            plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
            resourceAreaWidth: 230,
            editable: true,
            selectable:true,
            // eventColor: '#F3E2DE',
            displayEventTime:true,
            displayEventEnd:true,
            eventBorderColor:'white',
            eventTextColor:'black',
            eventRender: function(info) {
                console.log('hi event render')
                console.log(info)
                if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                    info.el.append(info.event.extendedProps.description)
                }

                var startDatetime =info.event.start;
                var endDatetime=info.event.end;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }
                var tooltip = new Tooltip(info.el, {
                    title: toolText,
                    placement: 'top',
                    trigger:'hover ',
                    container: 'body'
                });



            },
            eventClick: function(info) {


                console.log('eventClick');
                console.log(info);

                let startDate=info.event.start;

                let titleN =startDate.toString();
                let str = titleN.substring(0, 10);

                $('.titlebar').text('Edit Shift on '+str);
                $('.titlebarDelete').text('Delete Shift on '+str);





                let y=(startDate.getFullYear()).toString();
                let mm;
                if((startDate.getMonth())<10) {
                    let m = (startDate.getMonth()+1).toString();
                    mm = "0"+m;


                }
                let d =(startDate.getDate()).toString();
                let fullDate= y + "-" + mm + "-" + d;

                var fullTime = startDate.toTimeString();

                var modal2 = document.getElementById('myModal2');
                modal2.style.display = "block";

                var footer3 = document.getElementById('foot3');
                footer3.style.display = "block";




                let employee=info.event._def.resourceIds[0];
                $('#employee_id').val(employee);

                $('.page-head').hide();

                $('#start_date').val(fullDate);
                $('#start_time').val(fullTime);
                //console.log(e);
                let url=$('#myModal2').data('url');
                let id =info.event.id;

                //console.log(id);
                $.ajax({
                    url: url+"?"+ $.param({Id_update_scheduler: id}),
                    cache:false,
                    method: 'GET',
                    success: function (response) {
                        let res=JSON.parse(response);
                        console.log('check me')
                        console.log(res);

                        if(res.status ===1 ) {
                            // alert((res.row[0]).id);
                            let i=(res.rowShift[0]).id;
                            let f= (res.rowShift[0])["finish_time"];
                            let s= (res.rowShift[0])["start_time"];
                            let u=(res.rowShift[0])["unpaid_break"];
                            let n=(res.rowShift[0])["note"];
                            let po=(res.rowShift[0])["position_id"];
                            let shS=(res.rowShift[0])["status"];



                            $('#pos_id').val(po);
                            $('#_time').val(s);
                            $('#un_break').val(u);
                            $('#time_to').val(f);
                            $('#note_').val(n);
                            $('#shift_status').val(shS);


                            $('#id_edited_shift').val(i);



                            let pub= (res.rowScheduler[0])["publish"];
                            let idsche= (res.rowScheduler[0])["id"];
                            let j= (res.rowScheduler[0])["jobsite_id"];
                            let rshift= (res.rowScheduler[0])["repeat_shift"];
                            let revery= (res.rowScheduler[0])["repeat_every"];
                            let end= (res.rowScheduler[0])["end_date"];
                            let endRep= (res.rowScheduler[0])["end_repeat"];

                            let schSH= (res.rowScheduler[0])["status"];
                            let start= (res.rowScheduler[0])["start_date"];

                            $('#start_date').val(start);
                            $('#id_ed_scheduler2').val(idsche);
                            $('#job_id').val(j);
                            $('#repeat_shift').val(rshift);
                            $('#every').val(revery);
                            $('#ended_date').val(end);
                            //$('#publicValue').val(pub);
                            $('#scheduler_status').val(schSH);

                            if(pub == 1){
                                $('#submitAssignShiftEdit').hide();
                                $('#unPublishIT').show();
                            }else if(pub ==0){
                                $('#submitAssignShiftEdit').show();
                                $('#unPublishIT').hide();
                            }


                            if(rshift == 0){

                                $('#sch_repeat').val("0");

                                $('#repeat_shift').prop('checked',false);
                                // $('#unPublishIT').prop("disabled",false);
                                // $('#updatePublish').prop("disabled",false);




                            }else if(rshift==1){
                                $('#sch_repeat').val("1");

                                $('#repeat_shift').prop('checked',true);
                                $('#ended_date').val(endRep);
                                $('#every').val(revery);
                                $('.custshow').css('display', 'block');
                                //  $('#unPublishIT').prop("disabled",true);
                                // $('#updatePublish').prop("disabled",true);
                                // $('#unPublishIT').show();
                                $('#updatePublish').show();

                            }

                        }

                    }
                });



                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function(event) {

                    if (event.target == modal2) {
                        modal2.style.display = "none";
                    }
                };


                $('#deleteAssignShift').on('click',function (e) {
                    e.preventDefault();
                    if($('#sch_repeat').val() == 0){


                        if (confirm("Are you sure?")) {
                            let url = $(this).data('url');
                            var id_d=info.event.id;

                            // console.log(id);

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        location.reload();

                                    }


                                }

                            });
                        }




                    }else if($('#sch_repeat').val() == 1){

                        $('#modalDelete').show();

                        $('#deleteAll').on('click', function (e) {
                            e.preventDefault();

                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#modalPrefer').hide();
                                        $('#modalDelete').hide();
                                        location.reload();

                                    }


                                }

                            })

                        });

                        $('#deleteOne').on('click', function (e) {
                            e.preventDefault();
                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#myModal2').hide();
                                        $('#modalDelete').hide();
                                        info.el.remove();

                                    }


                                }

                            })

                        });

                    }

                });

                $('#submitAssignShiftEdit').on('click', function (e) {
                    e.preventDefault();
                    // console.log(this);

                    let url2=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url2,
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('helooo here')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });


                    }
                });

                $('#updatePublish').on('click', function (e) {
                    e.preventDefault();

                    $('#publicValue').val("1");
                    // console.log(this);

                    let url=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url+'?publish=1',
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('hello dssss')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });

                    }
                });

                $('#unPublishIT').on('click',function(e){
                    e.preventDefault();
                    let urll=$(this).data('url2');

                    $.ajax({
                        type: "POST",
                        url: urll+'?unpublish=1',
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            //console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1){
                                alert(res['id_scheduler']);
                                location.reload();


                            }
                            else {

                                alert("entity scheduler not insert");

                            }

                        }

                    });

                });

            },
            eventMouseEnter:function(info){
                console.log('eventMouseEnter=');
                console.log( info);

                //console.log(typeof (info.el));
                // var dlbtn = document.createElement("Button");// Create a <li> node
                //  var edbtn = document.createElement("Button");                 // Create a <li> node

                // var textnodeE = document.createTextNode("Edit");
                //  var textnodeD = document.createTextNode("Delete");// Create a text node
                // var edicon = document.createElement("i");// Create a text node

                //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                // edbtn.appendChild(textnodeE);
                // dlbtn.className="deleteBtn";


                // dlbtn.setAttribute('id','hoverDel');



                // edbtn.className="editBtn";
                // edicon.className='fas';
                // edicon.classList.add("fa-edit");
                // info.el.children[0].classList.add('custom');

                //console.log("it is here");
                //console.log((info.el.children[0]).children[0]);

                // $('.custom').css('display','none');
                //edbtn.appendChild(edicon);
                // info.el.appendChild(dlbtn);
                // info.el.appendChild(edbtn);


                $('#hoverDel').on('click', function (e) {


                    e.preventDefault();


                    if (confirm("Are you sure?")) {
                        $('#myModal2').hide();
                        let url = baseUri+'modules/workplan/classes/action/frm.php';
                        let id = info.event.id;
                        // console.log(id);

                        $.ajax({
                            type: "DELETE",
                            url: url + "?" + $.param({Id_delete_scheduler: id}),
                            cache: false,

                            success: function (response) {
                                //console.log(response);
                                $('#myModal2').hide();

                                var res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res["id_deleted"]);
                                    let idc = res["id_deleted"];
                                    $('#' + idc).remove();
                                    $("#lbl_msg_p").text("Deleted item was remove.");


                                }


                            }

                        });
                    }



                });

                var timezone_offset_min = info.event.start.getTimezoneOffset(),
                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                    offset_min = Math.abs(timezone_offset_min%60),
                    timezone_standard;

                if(offset_hrs < 10)
                    offset_hrs = '0' + offset_hrs;

                if(offset_min < 10)
                    offset_min = '0' + offset_min;

                // Add an opposite sign to the offset
                // If offset is 0, it means timezone is UTC
                if(timezone_offset_min < 0)
                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min > 0)
                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min == 0)
                    timezone_standard = 'Z';

                // Timezone difference in hours and minutes
                // String such as +5:30 or -6:00 or Z
                //console.log(timezone_standard);

                var newdateone;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                var newdatetwo;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                //tooltip
                var startDatetime =newdateone;
                var endDatetime=newdatetwo;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }



            },
            eventMouseLeave:function(info){
                $('.custom').css('display','block');
                $('div.fc-content').removeClass('custom');
                //remove tooltip
                $('.editBtn').remove();
                $('.deleteBtn').remove();


            },
            dateClick: function(info){

                var eid=info.resource.id;
                var posname=[];
                $.ajax({
                    url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                    success:function (response) {

                        res=JSON.parse(response);
                        console.log(res);
                        $.each(res,function(e){
                            var id=(res[e])["id"];



                            if(eid == id)
                            {
                                let pn=(res[e])["position"];
                                posname.push(pn);

                            }
                        });

                        console.log('dateClick');
                        console.log(info);
                        // console.log("sample:"+info.dateStr)
                        //console.log("sample:"+Date.parse(info.dateStr))

                        var timezone_offset_min = info.date.getTimezoneOffset(),
                            offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                            offset_min = Math.abs(timezone_offset_min%60),
                            timezone_standard;

                        if(offset_hrs < 10)
                            offset_hrs = '0' + offset_hrs;

                        if(offset_min < 10)
                            offset_min = '0' + offset_min;

                        // Add an opposite sign to the offset
                        // If offset is 0, it means timezone is UTC
                        if(timezone_offset_min < 0)
                            timezone_standard = '+' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min > 0)
                            timezone_standard = '-' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min == 0)
                            timezone_standard = 'Z';

                        // Timezone difference in hours and minutes
                        // String such as +5:30 or -6:00 or Z
                        //console.log(timezone_standard);

                        var newdateone;
                        if(timezone_standard.substr(0,1) == '+'){

                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                        }else if(timezone_standard.substr(0,1) == '-'){
                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                        }


                        // console.log("new object"+newdateone)

                        let startDate=info.date;
                        let titleN =startDate.toString();
                        let str = titleN.substring(0, 10);

                        $('.titlebar').text('Create Shift on '+str);

                        let y=(startDate.getFullYear()).toString();
                        let mm;

                        if((startDate.getMonth())<10) {
                            let m = (startDate.getMonth()+1).toString();
                            mm = "0"+m;
                        }else {
                            mm = startDate.getMonth();
                        }


                        let ddd;
                        if((startDate.getDate())<10){
                            let d = (startDate.getDate()).toString();
                            ddd = "0"+d;
                        }else {
                            ddd=startDate.getDate();
                        }

                        //  console.log(startDate.getDate())

                        let fullDate= y + "-" + mm + "-" + ddd;

                        //  console.log('this is start date',fullDate);

                        var res = newdateone.toTimeString();
                        var fullTime=res.substring(0, 8);

                        var modal = document.getElementById('myModal');
                        var modal2 = document.getElementById('myModal2');

                        modal.style.display = "block";

                        var footer2 = document.getElementById('foot2');
                        footer2.style.display = "block";

                        if(info.resource.id == 0){
                            $('.custblock').show();
                        }
                        else {
                            $('span.tag-position').each(function (index) {
                                //  console.log('hi each')
                                //console.log(index)


                                var textPos = $(this).text();
                                $($(this).context.parentElement.parentElement).hide();

                                for(var i in posname) {
                                    if (posname[i] == textPos) {
                                        // console.log($(this).context.parentElement.parentElement)
                                        $($(this).context.parentElement.parentElement).show();
                                    }
                                }


                            });
                        }


                        let employee=info.resource.id;
                        $('#employee_id_').val(employee);
                        $('#employee_id').val(employee);

                        $('.page-head').hide();



                        $('.time-block').on('click' , function(e) {
                            // console.log(e);
                            //  console.log('hi ajax');


                            modal.style.display = "none";

                            let url2=$('#myModal').data('url2');
                            //let id_shift_selected=$('.time-block').data('id');

                            let shift_id=e.currentTarget.attributes[1].nodeValue;

                            $.ajax({
                                type: "POST",
                                url: url2,
                                data:{
                                    id_shift:shift_id,
                                    id_employee:employee,
                                    startDate:fullDate,
                                    endDate:fullDate,
                                    value:1

                                },
                                cache:false,

                                success: function (response){
                                    let res=JSON.parse(response);

                                    // console.log(res.row);
                                    if(res.status ===1 ) {
                                        alert(res.rowScheduler);
                                        location.reload();

                                    }


                                }

                            })
                        });

                        $('.show-icon').on('click' , function(e) {
                            $('#myModal').hide();
                            $('#myModal2').show();
                            $('#schedule__id').val(conceptSchedule);
                            $('#employee_id').val(employee);
                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal').data('url');
                            //let shift_id=$('#myModal').data('id');

                            //let data=$('#myModal').data('value');
                            let id=e.target.parentElement.attributes[1].nodeValue;
                            if(id !== "0") {
                                //console.log(id);
                                $.ajax({
                                    url: url + "?" + $.param({
                                        Id_update_shift_scheduler: id,
                                        schedule_id: conceptSchedule
                                    }),
                                    cache: false,
                                    method: 'GET',
                                    success: function (response) {
                                        let res = JSON.parse(response);
                                        console.log(res);

                                        if (res.status === 1) {
                                            //alert((res.row[0]).id);
                                            let i = (res.row[0]).id;
                                            let f = (res.row[0])["finish_time"];
                                            let s = (res.row[0])["start_time"];
                                            let u = (res.row[0])["unpaid_break"];
                                            let n = (res.row[0])["note"];
                                            let po = (res.row[0])["position_id"];

                                            let select = document.getElementById('job_id');

                                            // console.log('job site',res.jsite);
                                            let js = res.jsite;
                                            for (let s = 0; s < js.length; ++s) {
                                                let idj = (js[s])["id"];
                                                let namej = (js[s])["name"];


                                                var opt = document.createElement('option');
                                                opt.value = idj;
                                                opt.innerHTML = namej;
                                                select.appendChild(opt);
                                            }

                                            $('#pos_id').val(po);
                                            $('#_time').val(s);
                                            $('#un_break').val(u);
                                            $('#time_to').val(f);
                                            $('#note_').val(n);

                                            $('#id_edited_shift').val(i);

                                        }


                                    }
                                });
                            }


                        });

                        // When the user clicks anywhere outside of the modal, close it
                        window.onclick = function(event) {
                            if (event.target == modal) {
                                modal.style.display = "none";
                            }
                            if (event.target == modal2) {
                                modal2.style.display = "none";
                            }
                        };




                    }
                });
            },
            eventResize: function(info) {
                alert(info.event.title + " end is now " + info.event.end.toISOString());


                if (!confirm("is this okay?")) {
                    info.revert();
                }else {
                    alert('accept resize');
                    console.log('hello resize');
                    console.log(info);


                    var id = info.event.id;


                    var startObj=info.event.start;

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);



                    var endObj=info.event.end;

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);
                    var posId=info.event.extendedProps['position_id'];



                    $.ajax({
                        type: "POST",
                        url: baseUri + 'modules/workplan/classes/action/frm.php',
                        data: {
                            id: id,
                            startTime:startFullTime,
                            endTime:endFullTime,
                            positionID:posId,
                            resizeEv:1


                        },
                        cache: false,
                        success: function (response) {
                            // console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res['id_scheduler_updated']);
                                location.reload();


                            }
                            else
                                alert('an error occured when updating scheduler!');
                            info.revert();

                        }

                    });




                }
            },
            eventDrop: function(info) {
                console.log('hello drop');
                console.log(info);
                // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                if (!confirm("Are you sure about this change?")) {
                    info.revert();
                }else {
                    alert('accept drop');


                    var id = info.event.id;
                    var posId=info.oldEvent.extendedProps['position_id'];


                    var startObj=info.event.start;
                    var endObj=info.event.end;

                    let yy=(startObj.getFullYear()).toString();
                    let mmm;
                    if((startObj.getMonth())<10) {
                        let m = (startObj.getMonth()+1).toString();
                        mmm = "0"+m;
                    }
                    let dd =(startObj.getDate()).toString();
                    let dateStart= yy + "-" + mmm + "-" + dd;

                    let y=(endObj.getFullYear()).toString();
                    let mm;
                    if((endObj.getMonth())<10) {
                        let m = (endObj.getMonth()+1).toString();
                        mm = "0"+m;
                    }
                    let d =(endObj.getDate()).toString();
                    let dateEnd= y + "-" + mm + "-" + d;


                    //set time wih tiemzone

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);

                    // console.log(startFullTime)

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);


                    if (info.newResource == null) {
                        console.log('newResource is null:'+info.newResource);
                        var emploID=info.oldEvent._def.resourceIds[0];

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:0

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    } else if(info.newResource !== null){
                        console.log('newResource no null:'+info.newResource.id)

                        var emploID=info.newResource.id;

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:1

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    }


                }
            },
            resourceRender: async function(renderInfo) {
                console.log('hi render resource')
                console.dir(renderInfo)


                renderInfo.el.style.backgroundColor = 'lightyellow';

                let calBud=0;

                let currentStart=renderInfo.view.currentStart;
                let yy=(currentStart.getFullYear()).toString();
                let mmm;
                if((currentStart.getMonth())<10) {
                    let m = (currentStart.getMonth()+1).toString();
                    mmm = "0"+m;
                }
                let dd ;
                if(currentStart.getDate()<10){
                    let calstart=(currentStart.getDate()).toString();
                    dd="0"+calstart;

                }else{
                    dd=(currentStart.getDate()).toString();

                }

                let dateStart= yy + "-" + mmm + "-" + dd;


                let currentEnd=renderInfo.view.currentEnd;
                let yy1=(currentEnd.getFullYear()).toString();
                let mmm1;
                if((currentEnd.getMonth())<10) {
                    let m1 = (currentEnd.getMonth()+1).toString();
                    mmm1 = "0"+m1;
                }
                let dd1 ;

                if(currentEnd.getDate()<10){
                    let calend=(currentEnd.getDate()).toString();
                    dd1="0"+calend;

                }else{
                    dd1=(currentEnd.getDate()).toString();

                }
                let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                console.log('calendar date start and end ',dateStart,dateEnd)



                let eventss=await new Promise(resolve => {
                    setTimeout(()=>{
                        resolve(renderInfo.resource.getEvents());
                    },1000)});

                console.log('getEvents',eventss,eventss.length);


                for(let h=0;h<eventss.length;h++){
                    //console.log('arr first',eventss[h].start,eventss[h].end);
                    var start1=eventss[h].start;
                    let yy11=(start1.getFullYear()).toString();
                    let mmm11;
                    if((start1.getMonth())<10) {
                        let m11 = (start1.getMonth()+1).toString();
                        mmm11 = "0"+m11;
                    }
                    // let dd11 =(start1.getDate()).toString();
                    let dd11;
                    if(start1.getDate() < 10 ){
                        let nnmm=(start1.getDate()).toString();
                        dd11="0"+nnmm;
                    }else {
                        dd11=(start1.getDate()).toString();
                    }

                    let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                    let end1=eventss[h].end;
                    let yy22=(end1.getFullYear()).toString();
                    let mmm22;
                    if((end1.getMonth())<10) {
                        let m112 = (end1.getMonth()+1).toString();
                        mmm22 = "0"+m112;
                    }
                    // let dd22 =(end1.getDate()).toString();
                    let dd22;
                    if(end1.getDate() < 10 ){
                        let ssaa=(end1.getDate()).toString();
                        dd22="0"+ssaa;

                    }else {
                        dd22=(end1.getDate()).toString();
                    }

                    let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                    console.log('events date',eveStartt,eveEnddd)

                    let numBudget=0;
                    if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                    {
                        console.log('calculating time');
                        let dif=end1.getTime() - start1.getTime();
                        var diffHrs = Math.floor((dif % 86400000) / 3600000);

                        numBudget = diffHrs;
                        console.log(Number(numBudget));

                    }
                    calBud += Number(numBudget);
                    console.log('in the loop',calBud)


                }
                console.log('calculatebud',calBud);

                if(renderInfo.resource.id !== "0")
                {
                    console.log('append')
                    $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                    totAssign.push(calBud);

                }else{
                    $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);

                    openshift=calBud;
                }

                combined.push(calBud);


                //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");
            },
            aspectRatio: 1.5,
            scrollTime: '07:00',
            header: {
                left: 'promptResource today prev,next',
                center: 'title',
                right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
            },
            customButtons: {
                promptResource: {
                    text: '+ Employee',
                    click: function() {
                        alert('hi employee');
                        //open modal
                        /*var title = prompt('Employee name');
                        if (title) {
                          calendar.addResource({
                            title: title
                          });
                        }*/
                    }
                }
            },
            defaultView: 'resourceTimelineDay',

            resourceLabelText: 'Employees',
            resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
            events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
        });

        calendar.render();
        $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
        $('#resFoot').append("<span class='total'></span>");



        $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
        $('#calFoot').append("<table><tr></tr></table>");
        $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

        $('.dropbtnp').on('click',function () {
            $('ul.content-ul').toggle();
        });


        $('ul.content-ul li').on('click',function(e){
            e.preventDefault();
            console.log('on click',this);
            $('ul.content-ul').css('display','none');
            let txtTot=$(this).text();
            $('span.title').text(txtTot);
            if(txtTot == "OpenShift Total"){
                $('.total').text(openshift+" Hours")
            }else if(txtTot == "Combined Total"){
                $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
            }else if(txtTot == "Assigned Total"){
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
            }


        });
    });

    $('.btnEmplo').on('click',()=> {
        alert('hi employee');
        $("#chbox-1").prop("checked", false);
        $("#chbox-2").prop("checked", false);

        calendar.destroy();
        $('#typeOfSch').val(1);
        $('.btnEmplo').css('background-color','gainsboro');
        $('.btnPos').css('background-color','none');
        totAssign=[];
        combined=[];
        openshift=0;
        var conceptSchedule = $('#schedule_id').find(":selected").val();
        console.log(conceptSchedule);
        //var calendarEl = document.getElementById('calendar');
        calendar = new FullCalendar.Calendar(calendarEl, {
            timeZone: 'UTC',
            plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
            resourceAreaWidth: 230,
            editable: true,
            selectable:true,
            //eventColor: '#e63d90',
            displayEventTime:true,
            displayEventEnd:true,
            eventBorderColor:'white',
            eventTextColor:'black',
            eventRender: function(info) {
                console.log('hi event render')
                console.log(info);
                if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                    info.el.append(info.event.extendedProps.description)
                }

                var startDatetime =info.event.start;
                var endDatetime=info.event.end;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }
                var tooltip = new Tooltip(info.el, {
                    title: toolText,
                    placement: 'top',
                    trigger:'hover ',
                    container: 'body'
                });



            },
            eventClick: function(info) {


                console.log('eventClick');
                console.log(info);

                let startDate=info.event.start;

                let titleN =startDate.toString();
                let str = titleN.substring(0, 10);

                $('.titlebar').text('Edit Shift on '+str);
                $('.titlebarDelete').text('Delete Shift on '+str);





                let y=(startDate.getFullYear()).toString();
                let mm;
                if((startDate.getMonth())<10) {
                    let m = (startDate.getMonth()+1).toString();
                    mm = "0"+m;


                }
                let d =(startDate.getDate()).toString();
                let fullDate= y + "-" + mm + "-" + d;

                var fullTime = startDate.toTimeString();

                var modal2 = document.getElementById('myModal2');
                modal2.style.display = "block";

                var footer3 = document.getElementById('foot3');
                footer3.style.display = "block";




                let employee=info.event._def.resourceIds[0];
                $('#employee_id').val(employee);

                $('.page-head').hide();

                $('#start_date').val(fullDate);
                $('#start_time').val(fullTime);
                //console.log(e);
                let url=$('#myModal2').data('url');
                let id =info.event.id;

                //console.log(id);
                $.ajax({
                    url: url+"?"+ $.param({Id_update_scheduler: id}),
                    cache:false,
                    method: 'GET',
                    success: function (response) {
                        let res=JSON.parse(response);
                        console.log('check me')
                        console.log(res);

                        if(res.status ===1 ) {
                            // alert((res.row[0]).id);
                            let i=(res.rowShift[0]).id;
                            let f= (res.rowShift[0])["finish_time"];
                            let s= (res.rowShift[0])["start_time"];
                            let u=(res.rowShift[0])["unpaid_break"];
                            let n=(res.rowShift[0])["note"];
                            let po=(res.rowShift[0])["position_id"];
                            let shS=(res.rowShift[0])["status"];



                            $('#pos_id').val(po);
                            $('#_time').val(s);
                            $('#un_break').val(u);
                            $('#time_to').val(f);
                            $('#note_').val(n);
                            $('#shift_status').val(shS);


                            $('#id_edited_shift').val(i);



                            let pub= (res.rowScheduler[0])["publish"];
                            let idsche= (res.rowScheduler[0])["id"];
                            let j= (res.rowScheduler[0])["jobsite_id"];
                            let rshift= (res.rowScheduler[0])["repeat_shift"];
                            let revery= (res.rowScheduler[0])["repeat_every"];
                            let end= (res.rowScheduler[0])["end_date"];
                            let endRep= (res.rowScheduler[0])["end_repeat"];

                            let schSH= (res.rowScheduler[0])["status"];
                            let start= (res.rowScheduler[0])["start_date"];

                            $('#start_date').val(start);
                            $('#id_ed_scheduler2').val(idsche);
                            $('#job_id').val(j);
                            $('#repeat_shift').val(rshift);
                            $('#every').val(revery);
                            $('#ended_date').val(end);
                            //$('#publicValue').val(pub);
                            $('#scheduler_status').val(schSH);

                            if(pub == 1){
                                $('#submitAssignShiftEdit').hide();
                                $('#unPublishIT').show();
                            }else if(pub ==0){
                                $('#submitAssignShiftEdit').show();
                                $('#unPublishIT').hide();
                            }


                            if(rshift == 0){

                                $('#sch_repeat').val("0");

                                $('#repeat_shift').prop('checked',false);
                                // $('#unPublishIT').prop("disabled",false);
                                // $('#updatePublish').prop("disabled",false);




                            }else if(rshift==1){
                                $('#sch_repeat').val("1");

                                $('#repeat_shift').prop('checked',true);
                                $('#ended_date').val(endRep);
                                $('#every').val(revery);
                                $('.custshow').css('display', 'block');
                                //  $('#unPublishIT').prop("disabled",true);
                                // $('#updatePublish').prop("disabled",true);
                                // $('#unPublishIT').show();
                                $('#updatePublish').show();

                            }

                        }

                    }
                });



                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function(event) {

                    if (event.target == modal2) {
                        modal2.style.display = "none";
                    }
                };


                $('#deleteAssignShift').on('click',function (e) {
                    e.preventDefault();
                    if($('#sch_repeat').val() == 0){


                        if (confirm("Are you sure?")) {
                            let url = $(this).data('url');
                            var id_d=info.event.id;

                            // console.log(id);

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        location.reload();

                                    }


                                }

                            });
                        }




                    }else if($('#sch_repeat').val() == 1){

                        $('#modalDelete').show();

                        $('#deleteAll').on('click', function (e) {
                            e.preventDefault();

                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#modalPrefer').hide();
                                        $('#modalDelete').hide();
                                        location.reload();

                                    }


                                }

                            })

                        });

                        $('#deleteOne').on('click', function (e) {
                            e.preventDefault();
                            let idDel=$('#id_ed_scheduler2').val();
                            let url = $(this).data('url2');

                            $.ajax({
                                type: "DELETE",
                                url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                cache: false,

                                success: function (response) {
                                    //console.log(response);
                                    let res = JSON.parse(response);
                                    if (res.status === 1) {
                                        alert(res["id_deleted"]);
                                        $('#myModal2').hide();
                                        $('#modalDelete').hide();
                                        info.el.remove();

                                    }


                                }

                            })

                        });

                    }

                });

                $('#submitAssignShiftEdit').on('click', function (e) {
                    e.preventDefault();
                    // console.log(this);

                    let url2=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url2,
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('helooo here')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });


                    }
                });

                $('#updatePublish').on('click', function (e) {
                    e.preventDefault();

                    $('#publicValue').val("1");
                    // console.log(this);

                    let url=$(this).data('url2');
                    if($('#sch_repeat').val() == 0){

                        $.ajax({
                            type: "POST",
                            url: url+'?publish=1',
                            data :$('#frmsubmitAssignShift').serialize(),
                            cache:false,

                            success: function (response){
                                //console.log(response);
                                let res=JSON.parse(response);
                                if(res.status ===1){
                                    alert(res['id_scheduler']);
                                    location.reload();


                                }
                                else {

                                    alert("entity scheduler not insert");

                                }

                            }

                        });

                    }else if($('#sch_repeat').val() == 1){
                        $('#modalUpdate').show();

                        $('#updateOne').on('click', function (e) {
                            console.log('hello dssss')
                            e.preventDefault();
                            $('#updateOneValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();

                                    }

                                }

                            });


                        });

                        $('#updateAll').on('click', function (e) {
                            e.preventDefault();
                            $('#updateAllValSch').val(1);
                            let url = $(this).data('url3');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data :$('#frmsubmitAssignShift').serialize(),
                                cache:false,

                                success: function (response){
                                    // console.log(response);
                                    let res=JSON.parse(response);
                                    if(res.status ===1 ){
                                        alert(res['id_scheduler']);
                                        location.reload();


                                    }

                                }

                            });

                        });

                    }
                });

                $('#unPublishIT').on('click',function(e){
                    e.preventDefault();
                    let urll=$(this).data('url2');

                    $.ajax({
                        type: "POST",
                        url: urll+'?unpublish=1',
                        data :$('#frmsubmitAssignShift').serialize(),
                        cache:false,

                        success: function (response){
                            //console.log(response);
                            let res=JSON.parse(response);
                            if(res.status ===1){
                                alert(res['id_scheduler']);
                                location.reload();


                            }
                            else {

                                alert("entity scheduler not insert");

                            }

                        }

                    });

                });

            },
            eventMouseEnter:function(info){
                console.log('eventMouseEnter=');
                console.log( info);

                //console.log(typeof (info.el));
                // var dlbtn = document.createElement("Button");// Create a <li> node
                //  var edbtn = document.createElement("Button");                 // Create a <li> node

                // var textnodeE = document.createTextNode("Edit");
                //  var textnodeD = document.createTextNode("Delete");// Create a text node
                // var edicon = document.createElement("i");// Create a text node

                //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                // edbtn.appendChild(textnodeE);
                // dlbtn.className="deleteBtn";


                // dlbtn.setAttribute('id','hoverDel');



                // edbtn.className="editBtn";
                // edicon.className='fas';
                // edicon.classList.add("fa-edit");
                // info.el.children[0].classList.add('custom');

                //console.log("it is here");
                //console.log((info.el.children[0]).children[0]);

                // $('.custom').css('display','none');
                //edbtn.appendChild(edicon);
                // info.el.appendChild(dlbtn);
                // info.el.appendChild(edbtn);


                $('#hoverDel').on('click', function (e) {


                    e.preventDefault();


                    if (confirm("Are you sure?")) {
                        $('#myModal2').hide();
                        let url = baseUri+'modules/workplan/classes/action/frm.php';
                        let id = info.event.id;
                        // console.log(id);

                        $.ajax({
                            type: "DELETE",
                            url: url + "?" + $.param({Id_delete_scheduler: id}),
                            cache: false,

                            success: function (response) {
                                //console.log(response);
                                $('#myModal2').hide();

                                var res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res["id_deleted"]);
                                    let idc = res["id_deleted"];
                                    $('#' + idc).remove();
                                    $("#lbl_msg_p").text("Deleted item was remove.");


                                }


                            }

                        });
                    }



                });

                var timezone_offset_min = info.event.start.getTimezoneOffset(),
                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                    offset_min = Math.abs(timezone_offset_min%60),
                    timezone_standard;

                if(offset_hrs < 10)
                    offset_hrs = '0' + offset_hrs;

                if(offset_min < 10)
                    offset_min = '0' + offset_min;

                // Add an opposite sign to the offset
                // If offset is 0, it means timezone is UTC
                if(timezone_offset_min < 0)
                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min > 0)
                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                else if(timezone_offset_min == 0)
                    timezone_standard = 'Z';

                // Timezone difference in hours and minutes
                // String such as +5:30 or -6:00 or Z
                //console.log(timezone_standard);

                var newdateone;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                var newdatetwo;
                if(timezone_standard.substr(0,1) == '+'){

                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                }else if(timezone_standard.substr(0,1) == '-'){
                    var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                    newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                }

                //tooltip
                var startDatetime =newdateone;
                var endDatetime=newdatetwo;

                var hoursS = startDatetime.getHours();
                var minutesS = "0" + startDatetime.getMinutes();
                var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                var hoursE = endDatetime.getHours();
                var minutesE = "0" + endDatetime.getMinutes();
                var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                var nu=Number((info.event.extendedProps.publish));

                if( nu ===0 )
                {

                    var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                    info.el.style.backgroundImage='url(' + imageUrl + ')';

                }



            },
            eventMouseLeave:function(info){
                $('.custom').css('display','block');
                $('div.fc-content').removeClass('custom');
                //remove tooltip
                $('.editBtn').remove();
                $('.deleteBtn').remove();


            },
            dateClick: function(info){

                var eid=info.resource.id;
                var posname=[];
                $.ajax({
                    url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                    success:function (response) {

                        res=JSON.parse(response);
                        console.log(res);
                        $.each(res,function(e){
                            var id=(res[e])["id"];



                            if(eid == id)
                            {
                                let pn=(res[e])["position"];
                                posname.push(pn);

                            }
                        });

                        console.log('dateClick');
                        console.log(info);
                        // console.log("sample:"+info.dateStr)
                        //console.log("sample:"+Date.parse(info.dateStr))

                        var timezone_offset_min = info.date.getTimezoneOffset(),
                            offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                            offset_min = Math.abs(timezone_offset_min%60),
                            timezone_standard;

                        if(offset_hrs < 10)
                            offset_hrs = '0' + offset_hrs;

                        if(offset_min < 10)
                            offset_min = '0' + offset_min;

                        // Add an opposite sign to the offset
                        // If offset is 0, it means timezone is UTC
                        if(timezone_offset_min < 0)
                            timezone_standard = '+' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min > 0)
                            timezone_standard = '-' + offset_hrs + ':' + offset_min;
                        else if(timezone_offset_min == 0)
                            timezone_standard = 'Z';

                        // Timezone difference in hours and minutes
                        // String such as +5:30 or -6:00 or Z
                        //console.log(timezone_standard);

                        var newdateone;
                        if(timezone_standard.substr(0,1) == '+'){

                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                        }else if(timezone_standard.substr(0,1) == '-'){
                            var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                            newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                        }


                        // console.log("new object"+newdateone)

                        let startDate=info.date;
                        let titleN =startDate.toString();
                        let str = titleN.substring(0, 10);

                        $('.titlebar').text('Create Shift on '+str);

                        let y=(startDate.getFullYear()).toString();
                        let mm;

                        if((startDate.getMonth())<10) {
                            let m = (startDate.getMonth()+1).toString();
                            mm = "0"+m;
                        }else {
                            mm = startDate.getMonth();
                        }


                        let ddd;
                        if((startDate.getDate())<10){
                            let d = (startDate.getDate()).toString();
                            ddd = "0"+d;
                        }else {
                            ddd=startDate.getDate();
                        }

                        //  console.log(startDate.getDate())

                        let fullDate= y + "-" + mm + "-" + ddd;

                        //  console.log('this is start date',fullDate);

                        var res = newdateone.toTimeString();
                        var fullTime=res.substring(0, 8);

                        var modal = document.getElementById('myModal');
                        var modal2 = document.getElementById('myModal2');

                        modal.style.display = "block";

                        var footer2 = document.getElementById('foot2');
                        footer2.style.display = "block";

                        if(info.resource.id == 0){
                            $('.custblock').show();
                        }
                        else {
                            $('span.tag-position').each(function (index) {
                                //  console.log('hi each')
                                //console.log(index)


                                var textPos = $(this).text();
                                $($(this).context.parentElement.parentElement).hide();

                                for(var i in posname) {
                                    if (posname[i] == textPos) {
                                        // console.log($(this).context.parentElement.parentElement)
                                        $($(this).context.parentElement.parentElement).show();
                                    }
                                }


                            });
                        }


                        let employee=info.resource.id;
                        $('#employee_id_').val(employee);
                        $('#employee_id').val(employee);

                        $('.page-head').hide();



                        $('.time-block').on('click' , function(e) {
                            // console.log(e);
                            //  console.log('hi ajax');


                            modal.style.display = "none";

                            let url2=$('#myModal').data('url2');
                            //let id_shift_selected=$('.time-block').data('id');

                            let shift_id=e.currentTarget.attributes[1].nodeValue;

                            $.ajax({
                                type: "POST",
                                url: url2,
                                data:{
                                    id_shift:shift_id,
                                    id_employee:employee,
                                    startDate:fullDate,
                                    endDate:fullDate,
                                    value:1

                                },
                                cache:false,

                                success: function (response){
                                    let res=JSON.parse(response);

                                    // console.log(res.row);
                                    if(res.status ===1 ) {
                                        alert(res.rowScheduler);
                                        location.reload();

                                    }


                                }

                            })
                        });

                        $('.show-icon').on('click' , function(e) {
                            $('#myModal').hide();
                            $('#myModal2').show();
                            $('#schedule__id').val(conceptSchedule);
                            $('#employee_id').val(employee);
                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal').data('url');
                            //let shift_id=$('#myModal').data('id');

                            //let data=$('#myModal').data('value');
                            let id=e.target.parentElement.attributes[1].nodeValue;
                            if(id !== "0") {
                                //console.log(id);
                                $.ajax({
                                    url: url + "?" + $.param({
                                        Id_update_shift_scheduler: id,
                                        schedule_id: conceptSchedule
                                    }),
                                    cache: false,
                                    method: 'GET',
                                    success: function (response) {
                                        let res = JSON.parse(response);
                                        console.log(res);

                                        if (res.status === 1) {
                                            //alert((res.row[0]).id);
                                            let i = (res.row[0]).id;
                                            let f = (res.row[0])["finish_time"];
                                            let s = (res.row[0])["start_time"];
                                            let u = (res.row[0])["unpaid_break"];
                                            let n = (res.row[0])["note"];
                                            let po = (res.row[0])["position_id"];

                                            let select = document.getElementById('job_id');


                                            let js = res.jsite;
                                            for (let s = 0; s < js.length; ++s) {
                                                let idj = (js[s])["id"];
                                                let namej = (js[s])["name"];


                                                var opt = document.createElement('option');
                                                opt.value = idj;
                                                opt.innerHTML = namej;
                                                select.appendChild(opt);
                                            }


                                            $('#pos_id').val(po);
                                            $('#_time').val(s);
                                            $('#un_break').val(u);
                                            $('#time_to').val(f);
                                            $('#note_').val(n);

                                            $('#id_edited_shift').val(i);

                                        }


                                    }
                                });
                            }


                        });

                        // When the user clicks anywhere outside of the modal, close it
                        window.onclick = function(event) {
                            if (event.target == modal) {
                                modal.style.display = "none";
                            }
                            if (event.target == modal2) {
                                modal2.style.display = "none";
                            }
                        };




                    }
                });
            },
            eventResize: function(info) {
                alert(info.event.title + " end is now " + info.event.end.toISOString());


                if (!confirm("is this okay?")) {
                    info.revert();
                }else {
                    alert('accept resize');
                    console.log('hello resize');
                    console.log(info);


                    var id = info.event.id;


                    var startObj=info.event.start;

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);



                    var endObj=info.event.end;

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);
                    var posId=info.event.extendedProps['position_id'];



                    $.ajax({
                        type: "POST",
                        url: baseUri + 'modules/workplan/classes/action/frm.php',
                        data: {
                            id: id,
                            startTime:startFullTime,
                            endTime:endFullTime,
                            positionID:posId,
                            resizeEv:1


                        },
                        cache: false,
                        success: function (response) {
                            // console.log(response);
                            let res = JSON.parse(response);
                            if (res.status === 1) {
                                alert(res['id_scheduler_updated']);
                                location.reload();


                            }
                            else
                                alert('an error occured when updating scheduler!');
                            info.revert();

                        }

                    });




                }
            },
            eventDrop: function(info) {
                console.log('hello drop');
                console.log(info);
                // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                if (!confirm("Are you sure about this change?")) {
                    info.revert();
                }else {
                    alert('accept drop');


                    var id = info.event.id;
                    var posId=info.oldEvent.extendedProps['position_id'];


                    var startObj=info.event.start;
                    var endObj=info.event.end;

                    let yy=(startObj.getFullYear()).toString();
                    let mmm;
                    if((startObj.getMonth())<10) {
                        let m = (startObj.getMonth()+1).toString();
                        mmm = "0"+m;
                    }
                    let dd =(startObj.getDate()).toString();
                    let dateStart= yy + "-" + mmm + "-" + dd;

                    let y=(endObj.getFullYear()).toString();
                    let mm;
                    if((endObj.getMonth())<10) {
                        let m = (endObj.getMonth()+1).toString();
                        mm = "0"+m;
                    }
                    let d =(endObj.getDate()).toString();
                    let dateEnd= y + "-" + mm + "-" + d;


                    //set time wih tiemzone

                    var timezone_offset_min = startObj.getTimezoneOffset(),
                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                        offset_min = Math.abs(timezone_offset_min%60),
                        timezone_standard;

                    if(offset_hrs < 10)
                        offset_hrs = '0' + offset_hrs;

                    if(offset_min < 10)
                        offset_min = '0' + offset_min;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min < 0)
                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min > 0)
                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                    else if(timezone_offset_min == 0)
                        timezone_standard = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone;
                    if(timezone_standard.substr(0,1) == '+'){

                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                    }

                    var res = newdateone.toTimeString();
                    var startFullTime=res.substring(0, 8);

                    // console.log(startFullTime)

                    var timezone_offset_min1 = endObj.getTimezoneOffset(),
                        offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                        offset_min1 = Math.abs(timezone_offset_min1%60),
                        timezone_standard1;

                    if(offset_hrs1 < 10)
                        offset_hrs1 = '0' + offset_hrs1;

                    if(offset_min1 < 10)
                        offset_min1 = '0' + offset_min1;

                    // Add an opposite sign to the offset
                    // If offset is 0, it means timezone is UTC
                    if(timezone_offset_min1 < 0)
                        timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min > 0)
                        timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                    else if(timezone_offset_min1 == 0)
                        timezone_standard1 = 'Z';

                    // Timezone difference in hours and minutes
                    // String such as +5:30 or -6:00 or Z
                    //console.log(timezone_standard);

                    var newdateone1;
                    if(timezone_standard1.substr(0,1) == '+'){

                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                    }else if(timezone_standard.substr(0,1) == '-'){
                        var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                        newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                    }


                    var res1 = newdateone1.toTimeString();
                    var endFullTime=res1.substring(0, 8);


                    if (info.newResource == null) {
                        console.log('newResource is null:'+info.newResource);
                        var emploID=info.oldEvent._def.resourceIds[0];

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:0

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    } else if(info.newResource !== null){
                        console.log('newResource no null:'+info.newResource.id)

                        var emploID=info.newResource.id;

                        $.ajax({
                            type: "POST",
                            url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                            data: {
                                id: id,
                                startDate:dateStart,
                                startTime:startFullTime,
                                endDate:dateEnd,
                                endTime:endFullTime,
                                positionID:posId,
                                emID:emploID,
                                resource:1

                            },
                            cache: false,
                            success: function (response) {
                                // console.log(response);
                                let res = JSON.parse(response);
                                if (res.status === 1) {
                                    alert(res['id_scheduler_updated']);
                                    location.reload();

                                }
                                else
                                    alert('an error occured when updating scheduler!');
                                info.revert();

                            }

                        });

                    }


                }
            },
            resourceRender: async function(renderInfo) {
                console.log('hi render resource')
                console.dir(renderInfo)

                let img=renderInfo.resource.extendedProps.img;
                renderInfo.el.style.backgroundColor = 'lightyellow';
                if(renderInfo.resource.id !== "0")
                {
                    $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                    if(!img ){

                        $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                    }else {

                        $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                    }

                }else{
                    $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                }
                let calBud=0;

                let currentStart=renderInfo.view.currentStart;
                let yy=(currentStart.getFullYear()).toString();
                let mmm;
                if((currentStart.getMonth())<10) {
                    let m = (currentStart.getMonth()+1).toString();
                    mmm = "0"+m;
                }
                let dd ;
                if(currentStart.getDate()<10){
                    let calstart=(currentStart.getDate()).toString();
                    dd="0"+calstart;

                }else{
                    dd=(currentStart.getDate()).toString();

                }

                let dateStart= yy + "-" + mmm + "-" + dd;


                let currentEnd=renderInfo.view.currentEnd;
                let yy1=(currentEnd.getFullYear()).toString();
                let mmm1;
                if((currentEnd.getMonth())<10) {
                    let m1 = (currentEnd.getMonth()+1).toString();
                    mmm1 = "0"+m1;
                }
                let dd1 ;

                if(currentEnd.getDate()<10){
                    let calend=(currentEnd.getDate()).toString();
                    dd1="0"+calend;

                }else{
                    dd1=(currentEnd.getDate()).toString();

                }
                let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                console.log('calendar date start and end ',dateStart,dateEnd)



                let eventss=await new Promise(resolve => {
                    setTimeout(()=>{
                        resolve(renderInfo.resource.getEvents());
                    },1000)});

                console.log('getEvents',eventss,eventss.length);


                for(let h=0;h<eventss.length;h++){
                    //console.log('arr first',eventss[h].start,eventss[h].end);
                    var start1=eventss[h].start;
                    let yy11=(start1.getFullYear()).toString();
                    let mmm11;
                    if((start1.getMonth())<10) {
                        let m11 = (start1.getMonth()+1).toString();
                        mmm11 = "0"+m11;
                    }
                    let dd11;
                    if(start1.getDate() < 10 ){
                        let nnmm=(start1.getDate()).toString();
                        dd11="0"+nnmm;
                    }else {
                        dd11=(start1.getDate()).toString();
                    }

                    let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                    let end1=eventss[h].end;
                    let yy22=(end1.getFullYear()).toString();
                    let mmm22;
                    if((end1.getMonth())<10) {
                        let m112 = (end1.getMonth()+1).toString();
                        mmm22 = "0"+m112;
                    }
                    // let dd22 =(end1.getDate()).toString();
                    let dd22;
                    if(end1.getDate() < 10 ){
                        let ssaa=(end1.getDate()).toString();
                        dd22="0"+ssaa;

                    }else {
                        dd22=(end1.getDate()).toString();
                    }

                    let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                    console.log('events date',eveStartt,eveEnddd)

                    let numBudget=0;
                    if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                    {
                        console.log('calculating time');
                        let dif=end1.getTime() - start1.getTime();
                        var diffHrs = Math.floor((dif % 86400000) / 3600000);

                        numBudget = diffHrs;
                        console.log(Number(numBudget));

                    }
                    calBud += Number(numBudget);
                    console.log('in the loop',calBud)


                }
                console.log('calculatebud',calBud);

                if(renderInfo.resource.id !== "0")
                {
                    console.log('append')
                    $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                    totAssign.push(calBud);
                }else{
                    openshift=calBud;
                }

                combined.push(calBud);


                //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


            },
            aspectRatio: 1.5,
            scrollTime: '07:00',
            header: {
                left: 'promptResource today prev,next',
                center: 'title',
                right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
            },
            customButtons: {
                promptResource: {
                    text: '+ Employee',
                    click: function() {
                        alert('hi employee');
                        //open modal
                        /*var title = prompt('Employee name');
                        if (title) {
                          calendar.addResource({
                            title: title
                          });
                        }*/
                    }
                }
            },
            defaultView: 'resourceTimelineDay',

            resourceLabelText: 'Employees',
            resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
            events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
        });

        calendar.render();
        $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
        $('#resFoot').append("<span class='total'></span>");



        $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
        $('#calFoot').append("<table><tr></tr></table>");
        $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

        $('.dropbtnp').on('click',function () {
            $('ul.content-ul').toggle();
        });


        $('ul.content-ul li').on('click',function(e){
            e.preventDefault();
            console.log('on click',this);
            $('ul.content-ul').css('display','none');
            let txtTot=$(this).text();
            $('span.title').text(txtTot);
            if(txtTot == "OpenShift Total"){
                $('.total').text(openshift+" Hours")
            }else if(txtTot == "Combined Total"){
                $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
            }else if(txtTot == "Assigned Total"){
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
            }


        });
    });

    var ckbox = $('#chbox-1');
    var ckbox2 = $('#chbox-2');

    $('input[name="chbox-1"]').on('click',()=>  {

        if (ckbox.is(':checked')) {
            alert('You have Checked it');
           // $("#chbox-2").prop("checked", false);
            //  var calendar = $('#calendar').fullCalendar('getCalendar');
            // calendar.fullCalendar('option', 'filterResourcesWithEvents', 'true');

            if(ckbox2.is(':checked')){

                if($('#typeOfSch').val() == 1){

                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('employee');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#e63d90',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }


                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('position');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }


                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }


                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                }

            }else {
                if($('#typeOfSch').val() == 1){

                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('employee');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#e63d90',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title+" | "+info.event.extendedProps.note ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }


                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('position');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");
                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });


                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });
                    calendar.render();

                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });




                }
            }




        } else {
            alert('You Un-Checked it');
            //$("#chbox-2").prop("checked", false);

            if(ckbox2.is(':checked')){

                if($('#typeOfSch').val() == 1){
                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();

                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                        eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");

                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });

                                        }
                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });

                    calendar.render();

                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                }
            }else {
                if($('#typeOfSch').val() == 1){
                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();

                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                        eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");



                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });

                                        }
                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    calendar.destroy();
                    totAssign=[];
                    combined=[];
                    openshift=0;
                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);
                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");

                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });

                    calendar.render();

                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                }
            }




        }
    });

    $('input[name="chbox-2"]').on('click',()=>  {

        if (ckbox2.is(':checked')) {
            alert('You have Checked it 2');

            if(ckbox.is(':checked')){

                if($('#typeOfSch').val() == 1){

                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('check box 2 employee');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#e63d90',
                        displayEventTime:true,
                        displayEventEnd:true,
                        eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();

                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }


                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });



                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('position');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        //eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");
                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                }
            }else {

                if($('#typeOfSch').val() == 1){

                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('check box 2 employee');
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        //eventColor: '#e63d90',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();
                            $('.tooltip').hide();

                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });

                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    console.log('position');
                    calendar.destroy();
                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        //eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    var budget=diffHrs*rate;
                                    numBudget = budget.toFixed(2);
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-gbp"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }


                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");

                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();
                            $('.tooltip').hide();

                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                }
            }





        } else {
            alert('You Un-Checked it 2');


            if(ckbox.is(':checked')){

                if($('#typeOfSch').val() == 1){
                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();

                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");



                        },
                        eventRender: function(info) {
                            console.log('hi event render')
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });

                                        }
                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();

                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: true,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");




                        },
                        eventRender: function(info) {
                            console.log('hi event render');
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });

                                        }
                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });

                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });


                }

            }else {


                if($('#typeOfSch').val() == 1){
                    //employee
                    var conceptSchedule = $('#schedule_id').find(":selected").val();

                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)

                            let img=renderInfo.resource.extendedProps.img;
                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';
                            if(renderInfo.resource.id !== "0")
                            {
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic" >');
                                if(!img ){

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                }else {

                                    $(renderInfo.el.lastChild.childNodes[1]).attr('src', baseUri + img.slice(24));

                                }

                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                            }
                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);

                            }else{
                                openshift=calBud;
                            }

                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");


                        },
                        eventRender: function(info) {
                            console.log('hi event render');
                            console.log(info);
                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description)
                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info)
                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },

                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources.php?with-nesting&with-colors&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events.php?Schedule="+conceptSchedule
                    });
                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });



                } else  if($('#typeOfSch').val() == 2){
                    //position
                    var conceptSchedule = $('#schedule_id').find(":selected").val();
                    calendar.destroy();

                    totAssign=[];
                    combined=[];
                    openshift=0;

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        timeZone: 'UTC',
                        plugins: [ 'dayGrid', 'timeGrid', 'interaction', 'resourceTimeline' ],
                        resourceAreaWidth: 230,
                        filterResourcesWithEvents: false,
                        editable: true,
                        selectable:true,
                        // eventColor: '#F3E2DE',
                        displayEventTime:true,
                        displayEventEnd:true,
                         eventBorderColor:'white',
                        eventTextColor:'black',
                        resourceRender: async function(renderInfo) {
                            console.log('hi render resource')
                            console.dir(renderInfo)


                            let rate=renderInfo.resource.extendedProps.rate;
                            renderInfo.el.style.backgroundColor = 'lightyellow';

                            let calBud=0;

                            let currentStart=renderInfo.view.currentStart;
                            let yy=(currentStart.getFullYear()).toString();
                            let mmm;
                            if((currentStart.getMonth())<10) {
                                let m = (currentStart.getMonth()+1).toString();
                                mmm = "0"+m;
                            }
                            let dd ;
                            if(currentStart.getDate()<10){
                                let calstart=(currentStart.getDate()).toString();
                                dd="0"+calstart;

                            }else{
                                dd=(currentStart.getDate()).toString();

                            }

                            let dateStart= yy + "-" + mmm + "-" + dd;


                            let currentEnd=renderInfo.view.currentEnd;
                            let yy1=(currentEnd.getFullYear()).toString();
                            let mmm1;
                            if((currentEnd.getMonth())<10) {
                                let m1 = (currentEnd.getMonth()+1).toString();
                                mmm1 = "0"+m1;
                            }
                            let dd1 ;

                            if(currentEnd.getDate()<10){
                                let calend=(currentEnd.getDate()).toString();
                                dd1="0"+calend;

                            }else{
                                dd1=(currentEnd.getDate()).toString();

                            }
                            let dateEnd= yy1 + "-" + mmm1 + "-" + dd1;
                            console.log('calendar date start and end ',dateStart,dateEnd)



                            let eventss=await new Promise(resolve => {
                                setTimeout(()=>{
                                    resolve(renderInfo.resource.getEvents());
                                },1000)});

                            console.log('getEvents',eventss,eventss.length);


                            for(let h=0;h<eventss.length;h++){
                                //console.log('arr first',eventss[h].start,eventss[h].end);
                                var start1=eventss[h].start;
                                let yy11=(start1.getFullYear()).toString();
                                let mmm11;
                                if((start1.getMonth())<10) {
                                    let m11 = (start1.getMonth()+1).toString();
                                    mmm11 = "0"+m11;
                                }
                                // let dd11 =(start1.getDate()).toString();
                                let dd11;
                                if(start1.getDate() < 10 ){
                                    let nnmm=(start1.getDate()).toString();
                                    dd11="0"+nnmm;
                                }else {
                                    dd11=(start1.getDate()).toString();
                                }

                                let eveStartt= yy11 + "-" + mmm11 + "-" + dd11;



                                let end1=eventss[h].end;
                                let yy22=(end1.getFullYear()).toString();
                                let mmm22;
                                if((end1.getMonth())<10) {
                                    let m112 = (end1.getMonth()+1).toString();
                                    mmm22 = "0"+m112;
                                }
                                // let dd22 =(end1.getDate()).toString();
                                let dd22;
                                if(end1.getDate() < 10 ){
                                    let ssaa=(end1.getDate()).toString();
                                    dd22="0"+ssaa;

                                }else {
                                    dd22=(end1.getDate()).toString();
                                }

                                let eveEnddd= yy22 + "-" + mmm22 + "-" + dd22;


                                console.log('events date',eveStartt,eveEnddd)

                                let numBudget=0;
                                if(eveStartt == dateStart &&  eveEnddd < dateEnd)
                                {
                                    console.log('calculating time');
                                    let dif=end1.getTime() - start1.getTime();
                                    var diffHrs = Math.floor((dif % 86400000) / 3600000);

                                    numBudget = diffHrs;
                                    console.log(Number(numBudget));

                                }
                                calBud += Number(numBudget);
                                console.log('in the loop',calBud)


                            }
                            console.log('calculatebud',calBud);

                            if(renderInfo.resource.id !== "0")
                            {
                                console.log('append')
                                $(renderInfo.el.childNodes).append('<span class="budget-span"><i class="icon-AdminWorkplan"></i>'+ calBud+'</span>');
                                totAssign.push(calBud);
                            }else{
                                $(renderInfo.el.childNodes).append('<img id="imageURL" class="pic-span" alt="person pic">');

                                $(renderInfo.el.lastChild.childNodes[1]).attr('src', imgNo);
                                openshift=calBud;
                            }


                            combined.push(calBud);


                            //console.log('in the function',totAssign.reduce((a, b) => a + b, 0))
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours");
                        },
                        eventRender: function(info) {
                            console.log('hi event render');
                            console.log(info);

                            if(arguments[0].view.viewSpec.durationUnit==='week'|| arguments[0].view.viewSpec.durationUnit==='month'){
                                info.el.append(info.event.extendedProps.description);

                            }

                            var startDatetime =info.event.start;
                            var endDatetime=info.event.end;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title +" | "+info.event.extendedProps.note;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }
                            var tooltip = new Tooltip(info.el, {
                                title: toolText,
                                placement: 'top',
                                trigger:'hover ',
                                container: 'body'
                            });



                        },
                        eventClick: function(info) {


                            console.log('eventClick');
                            console.log(info);

                            let startDate=info.event.start;

                            let titleN =startDate.toString();
                            let str = titleN.substring(0, 10);

                            $('.titlebar').text('Edit Shift on '+str);
                            $('.titlebarDelete').text('Delete Shift on '+str);





                            let y=(startDate.getFullYear()).toString();
                            let mm;
                            if((startDate.getMonth())<10) {
                                let m = (startDate.getMonth()+1).toString();
                                mm = "0"+m;


                            }
                            let d =(startDate.getDate()).toString();
                            let fullDate= y + "-" + mm + "-" + d;

                            var fullTime = startDate.toTimeString();

                            var modal2 = document.getElementById('myModal2');
                            modal2.style.display = "block";

                            var footer3 = document.getElementById('foot3');
                            footer3.style.display = "block";




                            let employee=info.event._def.resourceIds[0];
                            $('#employee_id').val(employee);

                            $('.page-head').hide();

                            $('#start_date').val(fullDate);
                            $('#start_time').val(fullTime);
                            //console.log(e);
                            let url=$('#myModal2').data('url');
                            let id =info.event.id;

                            //console.log(id);
                            $.ajax({
                                url: url+"?"+ $.param({Id_update_scheduler: id}),
                                cache:false,
                                method: 'GET',
                                success: function (response) {
                                    let res=JSON.parse(response);
                                    console.log('check me')
                                    console.log(res);

                                    if(res.status ===1 ) {
                                        // alert((res.row[0]).id);
                                        let i=(res.rowShift[0]).id;
                                        let f= (res.rowShift[0])["finish_time"];
                                        let s= (res.rowShift[0])["start_time"];
                                        let u=(res.rowShift[0])["unpaid_break"];
                                        let n=(res.rowShift[0])["note"];
                                        let po=(res.rowShift[0])["position_id"];
                                        let shS=(res.rowShift[0])["status"];



                                        $('#pos_id').val(po);
                                        $('#_time').val(s);
                                        $('#un_break').val(u);
                                        $('#time_to').val(f);
                                        $('#note_').val(n);
                                        $('#shift_status').val(shS);


                                        $('#id_edited_shift').val(i);



                                        let pub= (res.rowScheduler[0])["publish"];
                                        let idsche= (res.rowScheduler[0])["id"];
                                        let j= (res.rowScheduler[0])["jobsite_id"];
                                        let rshift= (res.rowScheduler[0])["repeat_shift"];
                                        let revery= (res.rowScheduler[0])["repeat_every"];
                                        let end= (res.rowScheduler[0])["end_date"];
                                        let endRep= (res.rowScheduler[0])["end_repeat"];

                                        let schSH= (res.rowScheduler[0])["status"];
                                        let start= (res.rowScheduler[0])["start_date"];

                                        $('#start_date').val(start);
                                        $('#id_ed_scheduler2').val(idsche);
                                        $('#job_id').val(j);
                                        $('#repeat_shift').val(rshift);
                                        $('#every').val(revery);
                                        $('#ended_date').val(end);
                                        //$('#publicValue').val(pub);
                                        $('#scheduler_status').val(schSH);

                                        if(pub == 1){
                                            $('#submitAssignShiftEdit').hide();
                                            $('#unPublishIT').show();
                                        }else if(pub ==0){
                                            $('#submitAssignShiftEdit').show();
                                            $('#unPublishIT').hide();
                                        }


                                        if(rshift == 0){

                                            $('#sch_repeat').val("0");

                                            $('#repeat_shift').prop('checked',false);
                                            // $('#unPublishIT').prop("disabled",false);
                                            // $('#updatePublish').prop("disabled",false);




                                        }else if(rshift==1){
                                            $('#sch_repeat').val("1");

                                            $('#repeat_shift').prop('checked',true);
                                            $('#ended_date').val(endRep);
                                            $('#every').val(revery);
                                            $('.custshow').css('display', 'block');
                                            //  $('#unPublishIT').prop("disabled",true);
                                            // $('#updatePublish').prop("disabled",true);
                                            // $('#unPublishIT').show();
                                            $('#updatePublish').show();

                                        }

                                    }

                                }
                            });



                            // When the user clicks anywhere outside of the modal, close it
                            window.onclick = function(event) {

                                if (event.target == modal2) {
                                    modal2.style.display = "none";
                                }
                            };


                            $('#deleteAssignShift').on('click',function (e) {
                                e.preventDefault();
                                if($('#sch_repeat').val() == 0){


                                    if (confirm("Are you sure?")) {
                                        let url = $(this).data('url');
                                        var id_d=info.event.id;

                                        // console.log(id);

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_scheduler: id_d}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    location.reload();

                                                }


                                            }

                                        });
                                    }




                                }else if($('#sch_repeat').val() == 1){

                                    $('#modalDelete').show();

                                    $('#deleteAll').on('click', function (e) {
                                        e.preventDefault();

                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_All_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#modalPrefer').hide();
                                                    $('#modalDelete').hide();
                                                    location.reload();

                                                }


                                            }

                                        })

                                    });

                                    $('#deleteOne').on('click', function (e) {
                                        e.preventDefault();
                                        let idDel=$('#id_ed_scheduler2').val();
                                        let url = $(this).data('url2');

                                        $.ajax({
                                            type: "DELETE",
                                            url: url + "?" + $.param({Id_delete_One_sch: idDel}),
                                            cache: false,

                                            success: function (response) {
                                                //console.log(response);
                                                let res = JSON.parse(response);
                                                if (res.status === 1) {
                                                    alert(res["id_deleted"]);
                                                    $('#myModal2').hide();
                                                    $('#modalDelete').hide();
                                                    info.el.remove();

                                                }


                                            }

                                        })

                                    });

                                }

                            });

                            $('#submitAssignShiftEdit').on('click', function (e) {
                                e.preventDefault();
                                // console.log(this);

                                let url2=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url2,
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('helooo here')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });


                                }
                            });

                            $('#updatePublish').on('click', function (e) {
                                e.preventDefault();

                                $('#publicValue').val("1");
                                // console.log(this);

                                let url=$(this).data('url2');
                                if($('#sch_repeat').val() == 0){

                                    $.ajax({
                                        type: "POST",
                                        url: url+'?publish=1',
                                        data :$('#frmsubmitAssignShift').serialize(),
                                        cache:false,

                                        success: function (response){
                                            //console.log(response);
                                            let res=JSON.parse(response);
                                            if(res.status ===1){
                                                alert(res['id_scheduler']);
                                                location.reload();


                                            }
                                            else {

                                                alert("entity scheduler not insert");

                                            }

                                        }

                                    });

                                }else if($('#sch_repeat').val() == 1){
                                    $('#modalUpdate').show();

                                    $('#updateOne').on('click', function (e) {
                                        console.log('hello dssss')
                                        e.preventDefault();
                                        $('#updateOneValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();

                                                }

                                            }

                                        });


                                    });

                                    $('#updateAll').on('click', function (e) {
                                        e.preventDefault();
                                        $('#updateAllValSch').val(1);
                                        let url = $(this).data('url3');

                                        $.ajax({
                                            type: "POST",
                                            url: url,
                                            data :$('#frmsubmitAssignShift').serialize(),
                                            cache:false,

                                            success: function (response){
                                                // console.log(response);
                                                let res=JSON.parse(response);
                                                if(res.status ===1 ){
                                                    alert(res['id_scheduler']);
                                                    location.reload();


                                                }

                                            }

                                        });

                                    });

                                }
                            });

                            $('#unPublishIT').on('click',function(e){
                                e.preventDefault();
                                let urll=$(this).data('url2');

                                $.ajax({
                                    type: "POST",
                                    url: urll+'?unpublish=1',
                                    data :$('#frmsubmitAssignShift').serialize(),
                                    cache:false,

                                    success: function (response){
                                        //console.log(response);
                                        let res=JSON.parse(response);
                                        if(res.status ===1){
                                            alert(res['id_scheduler']);
                                            location.reload();


                                        }
                                        else {

                                            alert("entity scheduler not insert");

                                        }

                                    }

                                });

                            });

                        },
                        eventMouseEnter:function(info){
                            console.log('eventMouseEnter=');
                            console.log( info);

                            //console.log(typeof (info.el));
                            // var dlbtn = document.createElement("Button");// Create a <li> node
                            //  var edbtn = document.createElement("Button");                 // Create a <li> node

                            // var textnodeE = document.createTextNode("Edit");
                            //  var textnodeD = document.createTextNode("Delete");// Create a text node
                            // var edicon = document.createElement("i");// Create a text node

                            //dlbtn.appendChild(textnodeD);     // Append the text to <li>
                            // edbtn.appendChild(textnodeE);
                            // dlbtn.className="deleteBtn";


                            // dlbtn.setAttribute('id','hoverDel');



                            // edbtn.className="editBtn";
                            // edicon.className='fas';
                            // edicon.classList.add("fa-edit");
                            // info.el.children[0].classList.add('custom');

                            //console.log("it is here");
                            //console.log((info.el.children[0]).children[0]);

                            // $('.custom').css('display','none');
                            //edbtn.appendChild(edicon);
                            // info.el.appendChild(dlbtn);
                            // info.el.appendChild(edbtn);


                            $('#hoverDel').on('click', function (e) {


                                e.preventDefault();


                                if (confirm("Are you sure?")) {
                                    $('#myModal2').hide();
                                    let url = baseUri+'modules/workplan/classes/action/frm.php';
                                    let id = info.event.id;
                                    // console.log(id);

                                    $.ajax({
                                        type: "DELETE",
                                        url: url + "?" + $.param({Id_delete_scheduler: id}),
                                        cache: false,

                                        success: function (response) {
                                            //console.log(response);
                                            $('#myModal2').hide();

                                            var res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res["id_deleted"]);
                                                let idc = res["id_deleted"];
                                                $('#' + idc).remove();
                                                $("#lbl_msg_p").text("Deleted item was remove.");


                                            }


                                        }

                                    });
                                }



                            });

                            var timezone_offset_min = info.event.start.getTimezoneOffset(),
                                offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                offset_min = Math.abs(timezone_offset_min%60),
                                timezone_standard;

                            if(offset_hrs < 10)
                                offset_hrs = '0' + offset_hrs;

                            if(offset_min < 10)
                                offset_min = '0' + offset_min;

                            // Add an opposite sign to the offset
                            // If offset is 0, it means timezone is UTC
                            if(timezone_offset_min < 0)
                                timezone_standard = '+' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min > 0)
                                timezone_standard = '-' + offset_hrs + ':' + offset_min;
                            else if(timezone_offset_min == 0)
                                timezone_standard = 'Z';

                            // Timezone difference in hours and minutes
                            // String such as +5:30 or -6:00 or Z
                            //console.log(timezone_standard);

                            var newdateone;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()-(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.start.setMinutes(info.event.start.getMinutes()+(offset_min)));
                                newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            var newdatetwo;
                            if(timezone_standard.substr(0,1) == '+'){

                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()-(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                            }else if(timezone_standard.substr(0,1) == '-'){
                                var newdate=new Date(info.event.end.setMinutes(info.event.end.getMinutes()+(offset_min)));
                                newdatetwo=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                            }

                            //tooltip
                            var startDatetime =newdateone;
                            var endDatetime=newdatetwo;

                            var hoursS = startDatetime.getHours();
                            var minutesS = "0" + startDatetime.getMinutes();
                            var formattedTimeS = hoursS + ':' + minutesS.substr(-2) ;

                            var hoursE = endDatetime.getHours();
                            var minutesE = "0" + endDatetime.getMinutes();
                            var formattedTimeE = hoursE + ':' + minutesE.substr(-2) ;

                            var toolText=formattedTimeS + " - " + formattedTimeE + " | "+info.event.title ;

                            var nu=Number((info.event.extendedProps.publish));

                            if( nu ===0 )
                            {

                                var imageUrl=baseUri+'modules/workplan/views/img/shift-item-not.png';
                                info.el.style.backgroundImage='url(' + imageUrl + ')';

                            }



                        },
                        eventMouseLeave:function(info){
                            $('.custom').css('display','block');
                            $('div.fc-content').removeClass('custom');
                            //remove tooltip
                            $('.editBtn').remove();
                            $('.deleteBtn').remove();


                        },
                        dateClick: function(info){

                            var eid=info.resource.id;
                            var posname=[];
                            $.ajax({
                                url:baseUri+'modules/workplan/ajax-resources.php?Schedule='+conceptSchedule,
                                success:function (response) {

                                    res=JSON.parse(response);
                                    console.log(res);
                                    $.each(res,function(e){
                                        var id=(res[e])["id"];



                                        if(eid == id)
                                        {
                                            let pn=(res[e])["position"];
                                            posname.push(pn);

                                        }
                                    });

                                    console.log('dateClick');
                                    console.log(info);
                                    // console.log("sample:"+info.dateStr)
                                    //console.log("sample:"+Date.parse(info.dateStr))

                                    var timezone_offset_min = info.date.getTimezoneOffset(),
                                        offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                        offset_min = Math.abs(timezone_offset_min%60),
                                        timezone_standard;

                                    if(offset_hrs < 10)
                                        offset_hrs = '0' + offset_hrs;

                                    if(offset_min < 10)
                                        offset_min = '0' + offset_min;

                                    // Add an opposite sign to the offset
                                    // If offset is 0, it means timezone is UTC
                                    if(timezone_offset_min < 0)
                                        timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min > 0)
                                        timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                    else if(timezone_offset_min == 0)
                                        timezone_standard = 'Z';

                                    // Timezone difference in hours and minutes
                                    // String such as +5:30 or -6:00 or Z
                                    //console.log(timezone_standard);

                                    var newdateone;
                                    if(timezone_standard.substr(0,1) == '+'){

                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()-(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                    }else if(timezone_standard.substr(0,1) == '-'){
                                        var newdate=new Date(info.date.setMinutes(info.date.getMinutes()+(offset_min)));
                                        newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                    }


                                    // console.log("new object"+newdateone)

                                    let startDate=info.date;
                                    let titleN =startDate.toString();
                                    let str = titleN.substring(0, 10);

                                    $('.titlebar').text('Create Shift on '+str);

                                    let y=(startDate.getFullYear()).toString();
                                    let mm;

                                    if((startDate.getMonth())<10) {
                                        let m = (startDate.getMonth()+1).toString();
                                        mm = "0"+m;
                                    }else {
                                        mm = startDate.getMonth();
                                    }


                                    let ddd;
                                    if((startDate.getDate())<10){
                                        let d = (startDate.getDate()).toString();
                                        ddd = "0"+d;
                                    }else {
                                        ddd=startDate.getDate();
                                    }

                                    //  console.log(startDate.getDate())

                                    let fullDate= y + "-" + mm + "-" + ddd;

                                    //  console.log('this is start date',fullDate);

                                    var res = newdateone.toTimeString();
                                    var fullTime=res.substring(0, 8);

                                    var modal = document.getElementById('myModal');
                                    var modal2 = document.getElementById('myModal2');

                                    modal.style.display = "block";

                                    var footer2 = document.getElementById('foot2');
                                    footer2.style.display = "block";

                                    if(info.resource.id == 0){
                                        $('.custblock').show();
                                    }
                                    else {
                                        $('span.tag-position').each(function (index) {
                                            //  console.log('hi each')
                                            //console.log(index)


                                            var textPos = $(this).text();
                                            $($(this).context.parentElement.parentElement).hide();

                                            for(var i in posname) {
                                                if (posname[i] == textPos) {
                                                    // console.log($(this).context.parentElement.parentElement)
                                                    $($(this).context.parentElement.parentElement).show();
                                                }
                                            }


                                        });
                                    }


                                    let employee=info.resource.id;
                                    $('#employee_id_').val(employee);
                                    $('#employee_id').val(employee);

                                    $('.page-head').hide();



                                    $('.time-block').on('click' , function(e) {
                                        // console.log(e);
                                        //  console.log('hi ajax');


                                        modal.style.display = "none";

                                        let url2=$('#myModal').data('url2');
                                        //let id_shift_selected=$('.time-block').data('id');

                                        let shift_id=e.currentTarget.attributes[1].nodeValue;

                                        $.ajax({
                                            type: "POST",
                                            url: url2,
                                            data:{
                                                id_shift:shift_id,
                                                id_employee:employee,
                                                startDate:fullDate,
                                                endDate:fullDate,
                                                value:1

                                            },
                                            cache:false,

                                            success: function (response){
                                                let res=JSON.parse(response);

                                                // console.log(res.row);
                                                if(res.status ===1 ) {
                                                    alert(res.rowScheduler);
                                                    location.reload();

                                                }


                                            }

                                        })
                                    });

                                    $('.show-icon').on('click' , function(e) {
                                        $('#myModal').hide();
                                        $('#myModal2').show();
                                        $('#schedule__id').val(conceptSchedule);
                                        $('#employee_id').val(employee);
                                        $('#start_date').val(fullDate);
                                        $('#start_time').val(fullTime);
                                        //console.log(e);
                                        let url=$('#myModal').data('url');
                                        //let shift_id=$('#myModal').data('id');

                                        //let data=$('#myModal').data('value');
                                        let id=e.target.parentElement.attributes[1].nodeValue;
                                        if(id !== "0") {
                                            //console.log(id);
                                            $.ajax({
                                                url: url + "?" + $.param({
                                                    Id_update_shift_scheduler: id,
                                                    schedule_id: conceptSchedule
                                                }),
                                                cache: false,
                                                method: 'GET',
                                                success: function (response) {
                                                    let res = JSON.parse(response);
                                                    console.log(res);

                                                    if (res.status === 1) {
                                                        //alert((res.row[0]).id);
                                                        let i = (res.row[0]).id;
                                                        let f = (res.row[0])["finish_time"];
                                                        let s = (res.row[0])["start_time"];
                                                        let u = (res.row[0])["unpaid_break"];
                                                        let n = (res.row[0])["note"];
                                                        let po = (res.row[0])["position_id"];

                                                        let select = document.getElementById('job_id');


                                                        let js = res.jsite;
                                                        for (let s = 0; s < js.length; ++s) {
                                                            let idj = (js[s])["id"];
                                                            let namej = (js[s])["name"];


                                                            var opt = document.createElement('option');
                                                            opt.value = idj;
                                                            opt.innerHTML = namej;
                                                            select.appendChild(opt);
                                                        }

                                                        $('#pos_id').val(po);
                                                        $('#_time').val(s);
                                                        $('#un_break').val(u);
                                                        $('#time_to').val(f);
                                                        $('#note_').val(n);

                                                        $('#id_edited_shift').val(i);

                                                    }


                                                }
                                            });
                                        }

                                    });

                                    // When the user clicks anywhere outside of the modal, close it
                                    window.onclick = function(event) {
                                        if (event.target == modal) {
                                            modal.style.display = "none";
                                        }
                                        if (event.target == modal2) {
                                            modal2.style.display = "none";
                                        }
                                    };




                                }
                            });
                        },
                        eventResize: function(info) {
                            alert(info.event.title + " end is now " + info.event.end.toISOString());


                            if (!confirm("is this okay?")) {
                                info.revert();
                            }else {
                                alert('accept resize');
                                console.log('hello resize');
                                console.log(info);


                                var id = info.event.id;


                                var startObj=info.event.start;

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);



                                var endObj=info.event.end;

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);
                                var posId=info.event.extendedProps['position_id'];



                                $.ajax({
                                    type: "POST",
                                    url: baseUri + 'modules/workplan/classes/action/frm.php',
                                    data: {
                                        id: id,
                                        startTime:startFullTime,
                                        endTime:endFullTime,
                                        positionID:posId,
                                        resizeEv:1


                                    },
                                    cache: false,
                                    success: function (response) {
                                        // console.log(response);
                                        let res = JSON.parse(response);
                                        if (res.status === 1) {
                                            alert(res['id_scheduler_updated']);
                                            location.reload();


                                        }
                                        else
                                            alert('an error occured when updating scheduler!');
                                        info.revert();

                                    }

                                });




                            }
                        },
                        eventDrop: function(info) {
                            console.log('hello drop');
                            console.log(info);
                            // alert(info.event.title + " was dropped on " + info.event.start.toISOString());

                            if (!confirm("Are you sure about this change?")) {
                                info.revert();
                            }else {
                                alert('accept drop');


                                var id = info.event.id;
                                var posId=info.oldEvent.extendedProps['position_id'];


                                var startObj=info.event.start;
                                var endObj=info.event.end;

                                let yy=(startObj.getFullYear()).toString();
                                let mmm;
                                if((startObj.getMonth())<10) {
                                    let m = (startObj.getMonth()+1).toString();
                                    mmm = "0"+m;
                                }
                                let dd =(startObj.getDate()).toString();
                                let dateStart= yy + "-" + mmm + "-" + dd;

                                let y=(endObj.getFullYear()).toString();
                                let mm;
                                if((endObj.getMonth())<10) {
                                    let m = (endObj.getMonth()+1).toString();
                                    mm = "0"+m;
                                }
                                let d =(endObj.getDate()).toString();
                                let dateEnd= y + "-" + mm + "-" + d;


                                //set time wih tiemzone

                                var timezone_offset_min = startObj.getTimezoneOffset(),
                                    offset_hrs = parseInt(Math.abs(timezone_offset_min/60)),
                                    offset_min = Math.abs(timezone_offset_min%60),
                                    timezone_standard;

                                if(offset_hrs < 10)
                                    offset_hrs = '0' + offset_hrs;

                                if(offset_min < 10)
                                    offset_min = '0' + offset_min;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min < 0)
                                    timezone_standard = '+' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min > 0)
                                    timezone_standard = '-' + offset_hrs + ':' + offset_min;
                                else if(timezone_offset_min == 0)
                                    timezone_standard = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone;
                                if(timezone_standard.substr(0,1) == '+'){

                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()-(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(startObj.setMinutes(startObj.getMinutes()+(offset_min)));
                                    newdateone=new Date(newdate.setHours(newdate.getHours()-(offset_hrs)));
                                }

                                var res = newdateone.toTimeString();
                                var startFullTime=res.substring(0, 8);

                                // console.log(startFullTime)

                                var timezone_offset_min1 = endObj.getTimezoneOffset(),
                                    offset_hrs1 = parseInt(Math.abs(timezone_offset_min1/60)),
                                    offset_min1 = Math.abs(timezone_offset_min1%60),
                                    timezone_standard1;

                                if(offset_hrs1 < 10)
                                    offset_hrs1 = '0' + offset_hrs1;

                                if(offset_min1 < 10)
                                    offset_min1 = '0' + offset_min1;

                                // Add an opposite sign to the offset
                                // If offset is 0, it means timezone is UTC
                                if(timezone_offset_min1 < 0)
                                    timezone_standard1 = '+' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min > 0)
                                    timezone_standard1 = '-' + offset_hrs1 + ':' + offset_min1;
                                else if(timezone_offset_min1 == 0)
                                    timezone_standard1 = 'Z';

                                // Timezone difference in hours and minutes
                                // String such as +5:30 or -6:00 or Z
                                //console.log(timezone_standard);

                                var newdateone1;
                                if(timezone_standard1.substr(0,1) == '+'){

                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()-(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));


                                }else if(timezone_standard.substr(0,1) == '-'){
                                    var newdate=new Date(endObj.setMinutes(endObj.getMinutes()+(offset_min1)));
                                    newdateone1=new Date(newdate.setHours(newdate.getHours()-(offset_hrs1)));
                                }


                                var res1 = newdateone1.toTimeString();
                                var endFullTime=res1.substring(0, 8);


                                if (info.newResource == null) {
                                    console.log('newResource is null:'+info.newResource);
                                    var emploID=info.oldEvent._def.resourceIds[0];

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:0

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                } else if(info.newResource !== null){
                                    console.log('newResource no null:'+info.newResource.id)

                                    var emploID=info.newResource.id;

                                    $.ajax({
                                        type: "POST",
                                        url: baseUri + 'modules/workplan/classes/action/newFrm.php',
                                        data: {
                                            id: id,
                                            startDate:dateStart,
                                            startTime:startFullTime,
                                            endDate:dateEnd,
                                            endTime:endFullTime,
                                            positionID:posId,
                                            emID:emploID,
                                            resource:1

                                        },
                                        cache: false,
                                        success: function (response) {
                                            // console.log(response);
                                            let res = JSON.parse(response);
                                            if (res.status === 1) {
                                                alert(res['id_scheduler_updated']);
                                                location.reload();

                                            }
                                            else
                                                alert('an error occured when updating scheduler!');
                                            info.revert();

                                        }

                                    });

                                }


                            }
                        },
                        aspectRatio: 1.5,
                        scrollTime: '07:00',
                        header: {
                            left: 'promptResource today prev,next',
                            center: 'title',
                            right: 'resourceTimelineDay,resourceTimelineThreeDays,timeGridWeek,dayGridMonth'
                        },
                        customButtons: {
                            promptResource: {
                                text: '+ Employee',
                                click: function() {
                                    alert('hi employee');
                                    //open modal
                                    /*var title = prompt('Employee name');
                                       if (title) {
                                         calendar.addResource({
                                           title: title
                                         });
                                       }*/
                                }
                            }
                        },
                        defaultView: 'resourceTimelineDay',

                        resourceLabelText: 'Employees',
                        resources: baseUri+"modules/workplan/ajax-resources-pos.php?with-nesting&Schedule="+conceptSchedule,
                        events: baseUri+"modules/workplan/ajax-events-pos.php?Schedule="+conceptSchedule
                    });

                    calendar.render();
                    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
                    $('#resFoot').append("<span class='total'></span>");



                    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
                    $('#calFoot').append("<table><tr></tr></table>");
                    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>0</span></td>")})

                    $('.dropbtnp').on('click',function () {
                        $('ul.content-ul').toggle();
                    });


                    $('ul.content-ul li').on('click',function(e){
                        e.preventDefault();
                        console.log('on click',this);
                        $('ul.content-ul').css('display','none');
                        let txtTot=$(this).text();
                        $('span.title').text(txtTot);
                        if(txtTot == "OpenShift Total"){
                            $('.total').text(openshift+" Hours")
                        }else if(txtTot == "Combined Total"){
                            $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
                        }else if(txtTot == "Assigned Total"){
                            $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
                        }


                    });

                }

            }




        }


    });



  // readjust sizing after font load
  window.addEventListener('load', function() {
    calendar.updateSize();

  });


    $('.fc-body tr .fc-resource-area.fc-widget-content .fc-scroller-clip .fc-scroller-canvas').append("<div id='resFoot'><div class='resfooter'><button class='dropbtnp'><i class='icon-chevron-down' style='color: darkgray;'></i></button><ul class='content-ul'><li class='toti'><a href='#'>Assigned Total</a></li><li class='toti'><a href='#'>OpenShift Total</a></li><li class='toti'><a href='#'>Combined Total</a></li></ul></div><span class='title'>Assigned Total</span><div class='qicon'><i class='icon-question' style='padding:2px;'></i><span class='toolTxt toolTop'>Including unpaid break time</span></div></div>");
    $('#resFoot').append("<span class='total'></span>");



    $('.fc-body tr .fc-time-area.fc-widget-content .fc-scroller-canvas ').after().append("<div id='calFoot'></div>");
    $('#calFoot').append("<table><tr></tr></table>");
    $('.fc-chrono').children().each(function(v,i){$('#calFoot table tr').append("<td style='width: 48.90px;'><span>34</span></td>")})

   $('.dropbtnp').on('click',function () {
        $('ul.content-ul').toggle();
   });


    $('ul.content-ul li').on('click',function(e){
        e.preventDefault();
      console.log('on click',this);
      $('ul.content-ul').css('display','none');
        let txtTot=$(this).text();
            $('span.title').text(txtTot);
            if(txtTot == "OpenShift Total"){
                $('.total').text(openshift+" Hours")
            }else if(txtTot == "Combined Total"){
                $('.total').text(combined.reduce((a, b) => a + b, 0)+" Hours")
            }else if(txtTot == "Assigned Total"){
                $('.total').text(totAssign.reduce((a, b) => a + b, 0)+" Hours")
            }


    });



});
